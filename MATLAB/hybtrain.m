%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [projhyb,trainData] = hybtrain(projhyb)
% HYBTRAIN trains a hybrid model
%
%[projhyb] = HYBTRAIN(projhyb)
%
% INPUT ARGUMENTS
% projhyb           Data strtucture holding information of the hybrid model, 
%                   data and traning method
%
% OUTPUT ARGUMENTS
% projhyb           Updated data strtucture holding information of the 
%                   trained hybrid model, and training performance
%
% Copyright, 2020 -
% This M-file and the code in it belongs to the holder of the
% copyrights and is made public under the following constraints:
% It must not be changed or modified and code cannot be added.
% The file must be regarded as read-only.
% In case of doubt, contact the holder of the copyrights.
%
% AUTHORS: Rui Oliveira
%
% Copyright holder:
%
% Rui Oliveira
% Faculdade de Ci�ncias e Tecnologia
% Universidade Nova de Lisboa
% DQ/FCT/UNL 6� piso
% P-2829-516 Caparica, Portugual
% Phone  +351 212948356
% Fax    +351 212948385
% E-mail rmo@fct.unl.pt
%
% $ Version 10.00 $ Date November 2020 $ Not compiled $
assert(nargin>=1,'at least 1 inputs HYBTRAIN( projhyb)');
assert(projhyb.nensemble<=projhyb.nstep,...
    'Too many aggegation parameters\nnsensemble<=nstep');
assert(projhyb.nensemble>0,...
    'nnsensemble must be at least 1');
assert(projhyb.nstep>0,...
    'nstep must be >=1');


% Prepare data for training
projhyb.ntrain=0;
projhyb.istrain=zeros(projhyb.nbatch,1);
istrainSAVE=zeros(projhyb.nbatch,1);
projhyb.itr=[];
cnt_jctrain=0;   cnt_jcval=0;    cnt_jctest=0;    
for i=1:projhyb.nbatch
     projhyb.istrain(i)=projhyb.batch(i).istrain;
   %  istrainSAVE(i)=projhyb.batch(i).istrain;
     if projhyb.batch(i).istrain==1
         projhyb.ntrain=projhyb.ntrain+1;
         projhyb.itr(end+1)=i;
         cnt_jctrain=cnt_jctrain+numel(projhyb.batch(i).cnoise);
     elseif projhyb.batch(i).istrain==3
         cnt_jctest=cnt_jctest+numel(projhyb.batch(i).cnoise);
     end
end
if projhyb.bootstrap==1 
    if ~isfield(projhyb,'nbootstrap')
        projhyb.nbootstrap=projhyb.ntrain;
        projhyb.nstep=projhyb.ntrain;
    else
        projhyb.nstep=projhyb.nbootstrap;
    end
    if ~isfield(projhyb,'nbootrate')
        projhyb.nbootrate=2/3;
    end
    nboot=max(1,floor(projhyb.ntrain*projhyb.nbootrate));
end

% this is the output function for lsqnonl e fminunc; it is a nested
% function
ofun1=@(x1,x2,x3)outFun1(x1,x2,x3,projhyb);


fprintf('\nTraining mehod:\n')
if projhyb.mode==1
    fprintf('   Mode:                   Indirect\n')
elseif projhyb.mode==2
    fprintf('   Mode:                   Direct\n')
elseif projhyb.mode==3
    fprintf('   Mode:                   Semidirect\n')
end
jacobian='off';
if projhyb.jacobian ==0
    fprintf('   Jacobian:               OFF\n')
elseif projhyb.jacobian ==1
    fprintf('   Jacobian:               ON\n')
    jacobian='on';
end
hessian='off';
if projhyb.hessian ==0
    fprintf('   Hessian:               OFF\n')
elseif projhyb.hessian ==1
    fprintf('   Hessian:               ON\n')
    hessian='on';
end
fprintf('   Steps:                  %u\n',projhyb.nstep)
fprintf('   Displayed iterations:   %u\n',projhyb.niter)
fprintf('   Total iterations:       %u\n',projhyb.niter*projhyb.niteroptim)
if projhyb.bootstrap==1
    fprintf('   Bootstrap:              ON\n')
    fprintf('   Bootstrap repetions:    %u\n', projhyb.nbootstrap)
    fprintf('   Bootstrap permutations: %u/%u\n',nboot,projhyb.ntrain)
else
    fprintf('   Bootstrap:              OFF\n')
end
if (projhyb.method==1) %levenber-marquardt
    fprintf('   Optimiser:              levenberg-marquardt\n')
    options = optimset('lsqnonlin');
    options = optimset(options,l',...
    'Jacobian',jacobian,'Display',projhyb.display,'MaxIter',projhyb.niter*projhyb.niteroptim,...
    'DerivativeCheck',projhyb.derivativecheck,'OutputFcn',ofun1,...
    'MaxFunEval',100000,'TolFun',1e-12,'TolX',1e-9);%,'OptimalityTolerance'); %,'DiffMaxChange',0.1);
elseif (projhyb.method==2) %quasi-Newton
    algorithm='lm-line-search';
    if projhyb.jacobian==1
        algorithm='trust-region-reflective';
    end
    fprintf('   Optimiser:              %s\n',algorithm);    
    options = optimset('fminunc');
    options = optimset(options,'Algorithm',algorithm,...     %'quasi-newton'
    'GradObj',jacobian,'Hessian',hessian, 'Display',projhyb.display,...   %'Diagnostics','on'
    'MaxIter',projhyb.niter*projhyb.niteroptim,...
    'DerivativeCheck',projhyb.derivativecheck,'OutputFcn',ofun1);%,...
    %'MaxFunEval',100000,'TolFun',1e-20,'TolX',1e-40); %,'DiffMaxChange',0.1);
elseif (projhyb.method==3) %simulated annealing
    fprintf('   Optimiser:              Simulated Annealing\n')
    optopts=saoptimset('Display',projhyb.display,'MaxIter',projhyb.niter*projhyb.niteroptim,'OutputFcn',ofun1);
    ParsLB=-20*ones(projhyb.mlm.nw,1);
    ParsUB=20*ones(projhyb.mlm.nw,1);
elseif (projhyb.method==4) %ADAMS
    fprintf('   Optimiser:              Adam\n')
    npall=0;
for l=1:projhyb.nbatch
    if projhyb.istrain(l) == 1
       npall=npall+length(projhyb.batch(l).t);
    end
end
  %  options.niter=projhyb.niter*npall; 
    options.niter=projhyb.niter*projhyb.niteroptim;
  %  options.LR=projhyb.learning_rate; Calculated in function
end
fprintf('\n\n');

%
% training performance data structure initialization
% 
TrainRes.witer=zeros(projhyb.nstep*projhyb.niter*2,projhyb.mlm.nw);
TrainRes.wstep=zeros(projhyb.nstep,projhyb.mlm.nw);
TrainRes.istrain=[];
TrainRes.resnorm=zeros(projhyb.nstep*projhyb.niter*2,1);
TrainRes.sjctrain=zeros(projhyb.nstep*projhyb.niter*2,1); 
TrainRes.sjrtrain=zeros(projhyb.nstep*projhyb.niter*2,1); 
TrainRes.sjcval=zeros(projhyb.nstep*projhyb.niter*2,1); 
TrainRes.sjrval=zeros(projhyb.nstep*projhyb.niter*2,1); 
TrainRes.sjctest=zeros(projhyb.nstep*projhyb.niter*2,1); 
TrainRes.sjrtest=zeros(projhyb.nstep*projhyb.niter*2,1); 
TrainRes.AICc=zeros(projhyb.nstep*projhyb.niter*2,1); %medida de ajuste
TrainRes.mj=zeros(projhyb.nstep,1);
TrainRes.iter=0;
TrainRes.istep=0;
TrainRes.t0=cputime;

if ~isfield(projhyb,'initweights')
    projhyb.initweights=1;
end
if projhyb.initweights==1
   fprintf('Weights initialization...\n')
   [weights,ann]=mlpnetinitw(projhyb.mlm.fundata);
   projhyb.mlm.fundata=ann;
elseif projhyb.initweights==2
   fprintf('Read weights from file...\n')
   weights = load(projhyb.weightsfile);
   weights=reshape(weights.wPHB0,numel(weights.wPHB0),1);
   projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,weights); 
end
%%%%%%%
% TRAINING BEGINS HERE:
% cycle for repetion projhyb.nstep different trainings with randomized 
% initial weights
for istep=1:projhyb.nstep
    
    for i=1:projhyb.nbatch
        projhyb.istrain(i)=projhyb.batch(i).istrain;
    end
    if projhyb.bootstrap==1 
        ind=sort(randperm(projhyb.ntrain,nboot));
        projhyb.istrain(projhyb.itr)=0;
        projhyb.istrain(projhyb.itr(ind))=1;
    end
    TrainRes.istrain=[TrainRes.istrain; projhyb.istrain'];
    if projhyb.mode==1  %INDIRECT
        if projhyb.method==4
            fobj=@(w,istrain)resfun_indirect_jac(w,istrain,projhyb,projhyb.method);
        elseif projhyb.jacobian ==0
            fobj=@(w)resfun_indirect(w,projhyb.istrain,projhyb,projhyb.method);
        elseif projhyb.jacobian ==1
            fobj=@(w)resfun_indirect_jac(w,projhyb.istrain,projhyb,projhyb.method);
        elseif projhyb.hessian ==1
            assert(projhyb.hessian ==1,'Hessian not yet implemented')
        end
    elseif projhyb.mode==2 %DIRECT
        if projhyb.method==4
            fobj=@(w,istrain)resfun_direct_jac(w,istrain,projhyb,projhyb.method);
        elseif projhyb.jacobian ==0
            fobj=@(w)resfun_direct(w,projhyb.istrain,projhyb,projhyb.method);
        elseif projhyb.jacobian ==1
            fobj=@(w)resfun_direct_jac(w,projhyb.istrain,projhyb,projhyb.method);
        elseif projhyb.hessian ==1
            assert(projhyb.hessian ==1,'Hessian not yet implemented')
        end
    elseif projhyb.mode==3 %SEMIDIRECT
        if projhyb.method==4
            fobj=@(w,istrain)resfun_semidirect_jac(w,istrain,projhyb,projhyb.method);
        elseif projhyb.jacobian ==0
            fobj=@(w)resfun_semidirect(w,projhyb.istrain,projhyb,projhyb.method);
        elseif projhyb.jacobian ==1
            fobj=@(w,istrain)resfun_semidirect_jac(w,projhyb.istrain,projhyb,projhyb.method);
        elseif projhyb.hessian ==1
            assert(projhyb.hessian ==1,'Hessian not yet implemented')
        end
    end

    if istep> 1
        fprintf('Weights initialization...\n')
        [weights,ann]=mlpnetinitw(projhyb.mlm.fundata);
        projhyb.mlm.fundata=ann;
    end
    
    if projhyb.mlm.nx==0
        for nparam=1:projhyb.mlm.ny
            weights(nparam)=projhyb.mlm.y(nparam).init;
        end
    end

    %%%%%%%%%%%%%%
    %weights=weights*0.01;
    %weights=[-0.626962577649131;-3.98940681083615;0.160305250150973;-0.739701670393783;-0.662960423053570;-1.89518424026291;-0.726855784840835;-0.842419619650255;-0.323817239130382;0.650448152287580;-0.0327155904769417;-0.736381727984722;-0.128848968484640;2.93866477054819;1.28089846819420;0.477713121183880;2.45702601546933;-1.05080787143623;-0.767610555657400;2.03105259689246;-2.23984342820714;1.49067009584025;-0.797049055202569;-0.451005069932017;2.04499287022081;-1.07257950653199;2.48819598851428;-2.84660935684569;0.464280126166929;2.85261329461975;0.0999514825144100;1.66024898511145;-0.0101255264746389;1.73016271688309;-0.276942642917118;-0.571401096498022;0.337967423912820;2.32315273091731;-0.0150569833179864;-0.0688209947145773;0.899602798458864;0.299048187488669;1.61967711208830;-0.272130180626261;0.174617999816950;-1.34002583900186;-0.378473705900337;-1.76174746407248;0.951157033036046;-2.11916297321565;0.241476255323151;-2.45706420845010;-1.58713476743358;-0.515967612777111;-0.122806704808145;0.998817665928127;0.589362026447385;-0.0219111462064571;0.462961419971911;1.36798513360590;-0.286810763563943;-0.833053681794815;-1.16164417907277;0.738778640626844;-1.34842843250704;-0.875664751044288;-1.10585634787732;-0.140026521812728;-0.667358503861093;1.76241224238006;1.23771017503580;-0.725443377634890;-1.15365355785092;-0.574726463840779;-1.08675969736693;1.43406873449603;-0.791047430793817;0.0563012790449846;-0.232604987202143;1.37853192109109;-0.102089968608878;1.09284548580063;0.199645674941156;0.0757344443956917;0.448869965340622;-1.54341363214496;0.0106101481378560;-0.0174555126741538;-1.38585688211510;0.271645722380470;-0.406924499665199;3.06104912601232;-0.0539666709246816;-0.0338598581461568;0.714530155556995;-0.118260637186528;-1.84039290599855;-0.688273742551975;0.687282925211641;-1.16861836873165;-0.336802863743391;-0.0530328918715159;-1.33880344593063;0.711029013476232;0.429502472995305;-0.709982638002424;-1.06546416186986;0.154147654454327;0.999148163824426;-0.854107173291205;-0.263876187048819;0.340055254107993;-0.268843883210470;0.0598851831356504;0.194609985606155;-0.392582609216268;-0.257863922504023;1.30475482028820;-0.125120992081693;0.167949801118301;-0.130339759119260;0.421470821351316;-0.131450108858298;0.761071351046293;0.0736290308984677;0.0741618248189712];
    %weights=[-0.611306732215934;-5.72217917017159;0.141695238669350;-0.479915087162655;-0.862038911307271;-2.47082446899851;-0.710726709795172;-1.17571806997286;-0.457394720705122;0.409853257044272;-0.190045080533050;-0.705931550996378;0.0882483916728419;4.59777315090923;1.80772621034472;0.337924170015592;3.31892305574151;-1.60854594111181;-1.43498240884710;2.33818860639662;-3.14465691751860;1.64022470819383;-1.36225863961167;-0.811570772317242;2.24319785142196;-1.73555948811848;3.23100288988482;-2.53536453539759;0.826417386955018;3.88214596936757;0.554440607971383;2.73002886337992;0.481916307916276;2.15919808732720;-0.555466717790020;-0.528172201978966;0.560608328966706;3.14326629971153;0.112228938518794;-0.249226125687511;0.930875161030716;0.444808339538307;2.15910313190531;-0.360681603947844;0.0984374359644479;-1.91212303651272;0.333651458919632;-2.27085352702013;1.77201690925533;-1.30024149614423;-0.408550216452639;-3.13331074749124;-2.26147509259923;0.472026683056039;-0.407700813692199;1.27064856327074;0.660744362449165;0.173387264711787;0.0870758138190373;1.87657777263576;-0.0939967734888611;-0.991245647843484;-1.18956451372576;0.620719787240456;-0.866006351970306;-1.26142111284941;-1.58621115761181;-0.854534077095452;-0.553027427780050;2.28798755439908;0.991874103908382;-1.28301049904316;-1.02948352449134;-0.653346480244272;-0.877988051118780;1.34191810871231;-0.581967642030995;-0.162433166756811;-0.791431727714270;1.07484549692401;0.325310680809684;1.56110920233624;0.950682272727228;-0.183855234164728;0.209198327114938;-0.958247169428573;-0.107509939518653;0.484726812196304;-1.35353951289647;0.268288563091418;-0.672764056916640;2.62542423844842;0.0847021322127800;-0.208420725235717;0.808880459582315;-0.120148567001732;-1.99915725756651;-1.05060248371281;0.761282194914378;-1.23047978394257;-0.562911083246473;-0.0557019582084501;-1.12223001273692;0.765272860519423;0.230167652937069;-0.110127835609304;-1.05531141859860;0.168623753211511;1.69918761130005;-0.541446334096116;-0.549155894961264;0.868068009439985;-0.112045028083270;0.0943222365780836;0.888593997197189;-0.483802964457319;-0.396451462506549;1.00509398863463;-0.368887440133339;0.152373183736492;0.326037498644010;0.163272058503904;-0.178688931583956;0.436991937837434;-0.0190399671623774;0.0473985907894502];
    %weights=[-0.611519614233480;-5.72225774997486;0.141608666728254;-0.479996751923689;-0.861877863262195;-2.47077649906283;-0.710616216079918;-1.17573769744212;-0.457621295511726;0.409721301809616;-0.189888787009555;-0.705830256933949;0.0884996254513276;4.59780799639333;1.80751004052052;0.337711486737070;3.31897495421342;-1.60852180034571;-1.43511993846213;2.33810603468001;-3.14480967613590;1.64018043971762;-1.36204903200145;-0.811453553511915;2.24294244553169;-1.73558460486947;3.23090541836881;-2.53542622310371;0.826584230535911;3.88234312381577;0.554211251133280;2.72995423239027;0.481868401544609;2.15918091829579;-0.555352082431173;-0.528120189887647;0.560618924849009;3.14317418313706;0.111838461816561;-0.249466628985172;0.931209759837311;0.444959541078209;2.15921125851716;-0.360381059347253;0.0983232312834164;-1.91171563280968;0.333679070513394;-2.27069312529850;1.77198590707743;-1.30003767623574;-0.408732713318147;-3.13322318545645;-2.26148880707631;0.472180811306952;-0.407764699026571;1.27096240512716;0.660843081795818;0.173552748652351;0.0870456512476291;1.87655865700807;-0.0937239931671201;-0.991458956062150;-1.18928733831259;0.620782361436489;-0.866065389495403;-1.26150573386200;-1.58646022515197;-0.854278551662639;-0.552865565723754;2.28786232301406;0.991798377957510;-1.28313659458086;-1.02956193423946;-0.653052306645983;-0.878167438429278;1.34234069262782;-0.582127573830003;-0.162294891702215;-0.791613721802553;1.07512721109517;0.325440512643311;1.56117325750077;0.950503107622348;-0.183742097855101;0.209960463954071;-0.957812534377284;-0.107227943286687;0.484723994747638;-1.35464374954503;0.267557565841615;-0.672535950905944;2.62538625122723;0.0851291865556941;-0.208700464409943;0.809067044485843;-0.119964357350680;-1.99911128633887;-1.05074948158907;0.761126764364705;-1.23067419606994;-0.562512855918040;-0.0554527634810724;-1.12290981896026;0.764924446147453;0.230118121989632;-0.110095324810628;-1.05438749084406;0.168356345592965;1.69902569751739;-0.541696000464576;-0.549325290454177;0.867884156180934;-0.111349384191945;0.0941149692292450;0.888485187474468;-0.484069489406864;-0.396755281961455;1.00483176514386;-0.368409895519231;0.152312343484553;0.326052841682133;0.163413527476757;-0.178940354594963;0.437257034249995;-0.0191194739943641;0.0475444680173318];
    %weights=[-0.603342079796786;-5.71580842003219;0.129953769963131;-0.480909772872576;-0.863341568941718;-2.47266942204198;-0.715666620782279;-1.16210078049249;-0.466770170637825;0.416078928609378;-0.191874669966649;-0.710142292434005;0.0783253858690803;4.59614034013539;1.81020100601546;0.335295316952752;3.32390120123115;-1.60460155955419;-1.45164787282641;2.35069122530630;-3.14213631036321;1.65243869085836;-1.37016466717729;-0.809425749574097;2.23222487315010;-1.72391455828300;3.22575562402513;-2.52536660881005;0.820382958759247;3.88315908136185;0.553299332080843;2.72622700359479;0.474919070147068;2.16426211118643;-0.548785427002784;-0.523946764688530;0.565442534899375;3.16918390696205;0.0829594492863134;-0.243145551044616;0.925969405622212;0.435604211938103;2.15234130247475;-0.351097780280170;0.0972443830831220;-1.90862016443960;0.323487634338563;-2.27808306520291;1.77534864615973;-1.30451401805827;-0.413295565743659;-3.12764914259186;-2.25686000665637;0.476886234967559;-0.410407679166845;1.28360525851550;0.662008369792047;0.180621481941243;0.0849749048226080;1.86659150658747;-0.0935208578855833;-0.980666234042002;-1.19272614270136;0.626079039694124;-0.864666454733178;-1.26692123008468;-1.58624783812792;-0.858680908663897;-0.560487767824850;2.29663488645104;0.994271452255343;-1.27444980648588;-1.02763607017091;-0.663634877718431;-0.888263178668015;1.34128898424037;-0.592389381164995;-0.153662880436236;-0.792947745513410;1.07126730406122;0.320955362927842;1.56317778965379;0.949245399533552;-0.181331333350965;0.210886859342283;-0.954828107637309;-0.110315771299219;0.484906309594800;-1.36421674099423;0.258189030480391;-0.677261432159284;2.62978597797357;0.0798372432062606;-0.187824257576144;0.816205554417389;-0.106859889361939;-1.99670653503544;-1.04768536708399;0.759734448091508;-1.21618797218015;-0.557050225944747;-0.0671997887921404;-1.12899679965705;0.761471740746238;0.233153421471180;-0.109677462781405;-1.04438612829617;0.158134734155411;1.70061241740583;-0.538939713362632;-0.547029315325565;0.883238573553668;-0.102891448227152;0.0937932407175429;0.894241369625358;-0.477780420414133;-0.378564470414240;1.02758726406551;-0.384501514487470;0.145827296808179;0.312938785988730;0.152736415628796;-0.160578529614100;0.433150272625414;-0.00533964112063989;0.0419629982587292];
    %weights=[0.247210419706383;-0.00591650675005088;-0.204168902189505;0.535666663962904;0.472102977851706;-0.196718093753108;0.347284094669307;0.593582196071569;0.773514135822180;-0.119390060827897;0.488653144514821;0.631418358832181;-0.417659077972630;-0.115634543081481;0.191981612737879;0.561994551581627;-1.02797648667118;0.132186846602589;0.261343305739234;-0.412746257196316;0.0429817469206268;0.520741803885270;0.615455743172906;-0.977323042291542;0.345470100098721;-0.782498533209105;-0.543037086513712;0.202464035554424;-0.115130377832763;0.467381743314220;-0.665539493763962;-0.721009546684266;-0.228050906476933;0.201752926624377;0.0173911063509909;-0.227198740235248;-0.462636882457981;-0.128532738751570;-0.614798097372857;-0.206681863088270;-0.234138883557267;-0.206740387336740;-0.441800308800840;-0.298034730556403;-0.0880283839735081;0.656119248456099;0.0228549312350053;-0.223476611666898;0.125421892726038;0.240397118549431;-0.123584417854658;0.558955560187707;0.306699407866784;0.140364672702715;-0.765797549113907;0.232739807389864;0.0275037821425978;-0.358863568525723;0.488535145063684;-0.0915803298288063;0.315997559663215;-0.214737871072959;-0.149963965329888;0.254854453334343;-0.267064675045034;-0.314998924210395;-0.632042316916053;0.149784179410574;-0.0640027340299148;0.238900007432643;0.242925457054935;-0.0110634191364026;0.160469348278742;0.513790473193847;-0.0861054317072606;0.705815132719932;0.591474820573447;0.0711468838884942;-0.726245913947284;0.213934756794554;-0.143841862858772;0.246670613798838;-0.611809691102623;1.05143902725250;0.422733214250951;-0.0544469734590023;0.579607310276361;0.0666897070164370;0.0979826027109526;0.645806234939848;0.563745244056287;-0.332678257792283;0.241572318189317;-0.488199319150849];
    %weights=[0.0369219556117889;0.105037843899563;0.168181453055272;1.35658575769944;0.409190693423868;0.347125874979871;1.02359725946660;0.101972408488930;1.02281530636714;0.0377029218278424;0.830575664791787;1.00685463920320;-0.745414255793722;-1.08650895647098;0.152407495870128;-0.250674567043096;-1.73691202782789;0.0302948694992322;0.302788775305431;-0.892454379419883;0.497299791442589;0.965780514971161;0.437701495352298;-1.49934967351539;0.508832057388095;-1.55580028812066;-1.21856962376726;0.784363381017153;0.126248849258691;0.938350033915503;-1.84362372426146;-0.823431104732952;0.600434772114091;0.363050887297065;-0.286743867103317;-0.864873757953858;-0.704822467575399;-1.01877668605775;-1.59043981279121;0.150996426853972;-0.119169503106481;-0.436877662740238;-0.703228696693184;-0.491108226983748;0.157340331797616;1.26117606538335;0.397531013621865;-0.194526925762925;-0.0522800154026805;0.0792426714479820;0.0102046395812105;1.55769345921810;0.303992308500518;0.720941675691136;-0.205726864951252;1.35390398405550;-0.0645923989650644;-0.770340171322237;0.851724316189763;-0.307025544895802;0.488907267922288;0.0699546059803225;-0.720615721038228;0.899048166566330;-0.587794206840014;-0.255970148995571;-0.557139930053143;0.607384998359907;-0.122349290204831;0.311040252533285;0.211213528765602;0.517671942396890;-0.395695779553750;0.978821166175439;-0.490027434190938;1.68927341130288;0.639962575085677;-0.411874923810679;-0.852747350138740;0.587311815199462;-0.618264437097707;0.455188690706499;-1.05946351833221;1.86490706441450;0.404425867230890;-0.317760000554973;0.683153992753513;0.180723787021259;-0.269180971522461;1.25064092480932;0.122328444880542;0.110455216083100;0.331413121451833;-0.412336332740266];
    %weights=[0.335830128666690;0.461080571047311;0.925978671193577;0.446160078727618;0.210194215587526;-0.680324338939891;0.488294382897618;0.160932372723943;-0.589772013059960;-0.235144330626571;0.142185030649959;-1.07823705383620;-0.760202477561855;0.267705885372833;-0.259268811120632;-0.367322006361896;-0.573173360732204;-0.104102822699328;0.939029929637249;0.143212802749534;-0.225555816088997;0.0255692380761437;-0.442461776438395;-0.00945579222781273;-0.521862148822386;0.144378789102479;-0.253621989559503;0.607531879096040;1.03199248257786;-0.0585483402492036;0.124629647576000;0.309047670675594;0.395884479692813;-0.121383550873887;0.671936166047057;-0.191473926165159;-0.444497651895883;0.215963343442023;-0.422406759802275;0.261337395457551;-0.279643638165766;0.138378429385506;-0.836120578023933;-0.163711051776775;0.0629198539997507;-0.675734751524703;-0.233591926588770;0.642627808258974;-0.988100872311255;-0.173014197298797;0.296442285172471;-0.260991495050976;-0.344305567593820;-0.248276096632283;-0.926648274374242;0.486604581541583;-1.31271257471168;0.0919420894050418;-0.974918410294111;-0.197509853322669;-0.0576036237601967;0.0786316468547269;-0.364193061866321;0.194339970074905;0.428689843912153;0.457895193828726;0.457524913316936;0.325594969882250;0.225556297788020;-0.129859795984731;-0.165246526772899;-0.138919733811210;0.318375657835669;-0.330382573640510;-0.00674121347952954;-0.0329908187875668;0.424588209127658;0.848595725246448;0.366238004709366;-0.0343114515417976;-0.902096921649678;-0.345145035566077;-0.594398091940749;0.213285638364916;-0.314995968763164;-0.00878442778768726;0.650250432271760;0.0904976406666926;-0.273592865652777;0.252833926945495;0.00773617503942883;-0.389862627214527;0.145789046446388;0.178698417074769;-0.0173527584944504;1.24260153902526;0.192243329412004;-0.119840145374993;-0.634926269516090;-0.644871200746535;0.898367076197078;-0.513481020370230;-0.327964676369967;0.0328398538796401;-0.0492850624327597;0.0262009285207040;0.263452594405502;1.34023908572834;-0.0297491777224566;0.215223107342224;-0.169839371816841;0.690868028014838;0.121095985649885;0.890570376805534;-0.251166027560871;0.172675311815800;-0.0847740294345684;-0.172430604442965;-0.261026256026240;1.19774678493600;0.243404914136529;-0.147284695327844;-0.445658257152430;-0.123220226380428;-0.00442446334687322;0.181999924227201;-0.0623846687478001;-0.0841992642983984;-0.0295946210470776;-0.417212176986370;0.0960601809552776;-0.475615338693347;-0.111647465494221;0.0695160862058526;0.310140740983664;0.515116909627542];
    %weights=[0.406434675594394;0.688121350268965;1.16190468114785;5.32472751993969e-05;1.38376657228396;-0.0586916908889377;-0.466448645189002;0.217956685277905;-0.973769236936450;-0.595784197177355;0.253872299580264;-1.51695825671232;-1.49716175722244;0.526749383800697;-1.25083582262836;-0.0825157128513350;0.334465594492431;-0.336126947161442;2.11966210508152;0.498919992344735;0.162007444093764;0.00497877036404662;-0.708105598838025;0.231045134817848;-0.513222896236828;0.116181056617313;0.423347645302041;0.830351857381248;1.34923298840252;-0.0560251670722317;0.570969653029773;0.268602134465999;1.46086961946171;0.330865434277661;0.996100303597502;-0.837691768010822;0.166575056981596;-0.0240465451963419;-0.664240115406572;0.291200345452552;-0.393554754085317;0.681267673377840;-1.38379728732904;-0.148984438018363;-0.245347403278425;-1.11698890526086;-0.653072349180196;0.794563206201379;-1.57008003398022;0.217457448241336;0.572771739544424;-0.379355350367071;-0.489049011623968;-0.499115168397276;-1.70119014221703;1.29468563511188;-2.57890616201152;0.0208680018946718;-1.67795889517988;-0.0471981328708249;-0.138733729768802;0.00613725659122240;0.192515051856906;0.109664433255284;0.644417690304168;1.11514645459657;0.958376195132571;0.176157800172128;0.294243997675733;0.0971207253412746;-0.0926270610273129;-0.0848889638300213;0.675444642136693;-0.378005153629535;-0.290852723610177;0.307495153913052;-0.00890390819515069;1.21513588550991;0.270344495515193;0.559093530839590;-1.70671353205055;0.211676194545327;-0.620382680791527;1.20916415217404;-0.308918245565771;-1.06800140405306;1.28952327619082;0.473180737954485;-0.498407670783149;0.363696779801518;0.149626628326528;-0.618718070646356;0.442447704026414;0.182545686237473;-0.421864392429228;1.58777230944944;0.410990382360253;0.804823404444764;-1.12337725955012;-1.12760276278852;1.42938842118478;-0.777867174549007;-0.568763374485245;0.118676689374784;-0.524908064713223;0.358228013790001;0.0857319688138479;1.57437048433768;-0.318402895138513;0.173915329160646;-0.895094737662779;1.12860686276968;-0.502800678100312;1.20816287007340;-0.263340952749566;0.283955856537669;-0.0897513313068448;-0.378220944067127;-0.543683435748948;2.04608515117757;0.392427671842488;0.284246664436303;-0.709229212688358;-0.791611069888108;-0.0805138158355314;0.0771254878265433;0.101447234412903;-0.581669220316005;0.169157965755484;-0.552228283893345;-0.119044833236616;-0.178424535614167;-0.0569796106914988;-0.0245247247200820;0.402609339023137;0.368813810136296];
    %weights=[-0.0335690105536182;-1.32462713854383;-0.133751029365652;0.466066491848521;0.396603908134034;-0.187067209989857;0.0481204634343078;1.45270210927737;-0.598457298499114;-0.207042676161586;0.233288806187109;1.21623893522504;0.401103141604156;0.704412841819259;-0.796805349123547;-0.479987003863101;-1.13195321594977;1.40465084631491;-2.80391147852435;-0.279874515129729;0.368004626865686;0.117888798115650;-1.54270164708608;0.628921551971978;-0.237535774711257;-0.292306684648043;0.526982785247292;0.545135585998873;0.262606185987610;-0.823227651404952;0.725541811070413;0.657427530580880;-0.560011856220010;1.08575059095350;-1.78203541035261;-0.808695250027712;0.864399041396234;-0.112446041093812;2.49658943459948;-0.870326463717635;0.665092659979259;-0.325131149188158;0.0364838239028845;-0.143876942467975;0.551305453205942;-0.0621024980460149;0.218367861833830;-0.336136953271663;0.363250712472320];
    %weights=[0.281384566919208;0.0649705727594068;-0.245056080441275;0.191849788452210;0.269352792673915;-0.122259998276869;-0.101865183851721;0.245726866737665;0.324697769835178;-0.0466637618794100;0.0536999644637334;0.179688771297457;0.106266436735312;0.259339749156380;-0.0354793094472674;-0.324570749728431;0.468755856140368;-0.189501657774061;-0.246302142781463;-0.0582090894125148;-0.351216830587344;0.365983699795689;-0.139857160182269;-0.675988656484598;-0.445671468180305;0.176281170810075;-0.897281183832692;0.0702303984393392;-0.579264390303051;0.389818068400547;0.241126581967213;-0.732921107146992;-0.460768920217296;0.197539920637405;-0.399341099863411;0.140863547481533;0.0333784882634285;-0.137957124683261;-0.0569059098921469;-0.146654655473167;-0.358128202706657;0.00329368325574715;-0.326575956614719;-0.222621247371846;0.0955495476514321;-0.372407117644154;0.253897933062691;-0.107747789918820;-0.668948783993955;-0.102643304383295;0.0786825221910076;-0.596680505465996;-0.110274822453459;-0.132921165908273;-0.320504354290390;0.307867676467649;-0.0988116997356465;0.413782928394427;-0.175759963385823;-0.194836953995098;0.154786262908822;0.531294692274900;-0.421262985339242;0.436001269382041;-0.0108563990030736;-0.159671516022014;-1.08315877599956;-0.330615857917918;0.616691973998940;0.0232838538884836;0.367502105482195;0.756970525349622;-0.272798018649128;-0.213800943666370;-0.0899043291587963;1.21674755470730;-0.421015603160809;0.416149179252854;0.0695175046820258;-0.373028681169944;-0.345726009457513;0.164796918803169;0.467141768919111;0.237756895193081];
    %weights=[1.19240454797984;2.50794943897383;0.214967514939973;0.508975783815770;-0.261805214677760;-0.101719113341954;-0.644712146623574;0.428926408572059;1.82272558795977;3.31815407728293;2.06551003513867;1.22147060332743;-0.627154011681121;1.04385384527399;-0.669351541105249;-1.04494872772937;1.21704306037533;2.13117361045007;-1.51950736740559;0.593897171941628;-0.658934839998969;1.21890729345186;-0.784717071158891;-1.09608653310230;-1.13727074663723;-0.408314961182036;0.193550750519648;0.182156887156530;0.191611511251945;0.246792329984374;1.07161116478903;-0.253919187688304;-2.70176569179081;-3.43724670595902;5.69242705582015;-2.87439129565883;2.56869165548218;1.83942520974631;2.40290911719053;0.465788858993219;1.96117592213378;2.07990354139115;-3.57791069832171;1.82554186840252;-2.54046565210501;-2.58834274009893;-0.373640585994927;1.06943155215996;2.09982643297337;-0.975795672597656;1.41102401867904;4.03618865376616;4.40139723849947;-2.05664011294711;-0.546001162998672;6.40316915170379;0.450883961731632;0.0972348010224104;-3.91628503789231;-1.96986373896082;-2.11885990590716;1.15541258860838;-0.857817637918934;-3.11899570148522;2.00554438850999;-1.07068714427824;0.00181205081596863;2.91206597890352;-0.402795372335518;-0.0207979408187135;0.321045329602588;-0.552563437085746;6.16645114833773;-3.08511568731608;3.94878650089023;9.77391615272068;0.0295686787363292;-0.0295683323283723;-0.146223145497510;-0.381248015888342;0.497383051317349;-0.219926771667917;0.0982147239110184;0.645382935204643];
    %weights=[-0.0870541056836112;0.00670558996426265;-0.652479617139274;0.506207179038592;0.589206622589630;0.666082821306172;-0.169765347749494;-1.00588322075233;-1.15916258262098;-0.210405764694352;-0.248183166075441;0.711082032011809;0.851628832755227;-0.860418179455156;-0.185559476974043;1.31898104739655;-0.157059522240963;-0.352300808627908;0.0740547188920960;-0.0379982003040145;0.492020974263172;-0.205748242624735;-0.130608704699375;0.476858101828282;0.192706784037936;-0.252062162784076;-1.02246233109600;0.544808393787155;0.103256059630020;0.983543052458632;-0.481078679820590;-0.0111257080927247;0.286055248671794;0.0330702258292075;-0.566084266092447;0.0126736881160351;-0.0276106826652744;-0.543805912729760;1.23914361674406;0.391281933395095;0.151046322058007;0.103783702018947;-0.329541731878755;0.705125559220889;0.00178103963475785;-0.0569880847306474;-0.110639751539629;0.0824683620760306;-0.463095907019199;-0.0298973584218621;0.0349797132583574;-0.226325562534032;-0.0346483155614038;0.00282440007621428;0.000702200201476436;-0.255135306387842;0.0317125146311822;-0.235265981184056;0.320134203381026;0.0823922511252222;-0.0464812778034722;-0.388257116929473;-0.277311582956934;0.528991654689997;-0.438113627757834;0.132695397288391;-0.247509293053751;-0.442001398935477;0.253474669397832;0.159936401854341;-0.269318402954888;0.0867126605992901;0.197509105012528;-0.128493078036466;-0.164110548304083;0.0259180841454828;-0.0523452314508178;0.123858078592067;0.951012291425606;-0.459646626511122;0.114584732024412;0.0922601515160600;0.0502394680731071;-0.210179657043888;0.371050584404759;0.141456200781039;-0.149348956569001;0.281084512541683;0.412671849323057;-0.154526584912635;0.0361173602566186;0.0776266926581853;-0.118042888043220;-0.397339381761838;-0.350851393805140;-0.471629846264497;0.0958421884449679;-0.261275281364317;0.0559328966725062;0.328658291176932;-0.184162240381738;-0.815104589977349;0.253137968713170;0.0156546292350993;-0.254270253520263;-0.421394608148769;0.156608741761145;0.0530453222011777;0.304705912467924;-0.140503776355970;-0.899746392225387;0.186089029881893;0.903822956385004;0.401340973768791;0.0476444672430459;-0.171424026808409;-0.668074530420909;0.180812763363809;0.199389292610954;0.172901578083349;-0.390413829282599;-0.0241944132895331;0.0295926826262593;0.418200365617905;0.0485834412992362;0.482154753715763;-0.803297074841808;-0.0653963132827383;0.0379037214689199;0.203637720534260;-0.193642912221653;0.528622839602229;0.0231390508115080;0.473079939043295;0.0763043103026549;-0.281544634880726;-0.714356169543564;0.125512052646995;-0.139691490492637;-0.00997407785589616;-0.122040886471816;0.171811101974606;-0.211087036675908;-0.937906221325953;-0.899029790332366;0.0336467161732097;0.536371470984983;-0.175201150732413;-0.160897738378606;-0.342186586839840;-0.372736017951173;0.607392809636448;-0.0970286131129667;-0.802470874946604;-0.153203833072587;-0.212977070226694;0.0781734739842212;0.112137696023075;-0.110710318908702;-0.0232384298589410;0.0335873704167908;0.198084846626617;-0.0353210251504299;0.272338785225316;-0.0391717479884161;0.110101131412063;0.284681145006895;-0.0277899727922301;0.00259906811906866;0.0548134378954835;0.0312133723432095;-0.294475503591513;0.155376354021875;0.470417799789423;0.220970588522866;-0.00369601431368805;-0.431288201462618;-0.531552511059903;-0.612805038726478;-0.482532625402342;0.511542353020269;-0.366372794856023;0.191523394421182;-0.666198066224998;-0.0251090391834204;0.239047575388005;0.504159558133813;0.539069671271934;0.0973255996407953;-0.204448579365510;-0.0238845508556929;-0.188297125152326;-0.262195569384758;0.266534141696133;0.761415439797867;-0.174632106454265;-0.971199397261882;0.503327821763852;0.170693208421219;-0.0987658373080650;-0.335654942790437;0.192183606606160;-0.140305781976176;-0.241999236569105;-0.189935089521281;0.359710859936686;-0.418456950010307;-0.198564351079444;-0.124276801888151;-0.281955967123354;-0.335526296885376;0.322075465807377;0.103452683131306;-0.345717934366842];
    %weights=[-0.110334095450405;-0.00343843339212156;-0.638531879730371;0.509582104552713;0.614583574046809;0.630787829461821;-0.203552702770932;-0.992311629531378;-1.14094480320341;-0.211464642306908;-0.254315733248679;0.720123810962877;0.870504060701787;-0.858270506200451;-0.163725019345955;1.35281789117190;-0.184696432208407;-0.357126037164121;0.0846432268525369;-0.0465042689746227;0.496421123631231;-0.190744315396062;-0.125527833703983;0.487270492748293;0.191463274337838;-0.252792996071839;-1.04942949967505;0.562942802494131;0.140400376267592;1.00928537656846;-0.476438225416990;-0.0256852392600722;0.283641222961940;0.0351626021626753;-0.542466239708008;-0.000441618487516790;-0.00662750668923695;-0.533599933256611;1.22983630773169;0.376209800941633;0.165173796332704;0.101212611228207;-0.342757154494480;0.722444609267906;-0.000255655133016229;-0.0389749695471400;-0.126333472156672;0.0713401956063125;-0.456935336541153;-0.0334824140270869;0.0208604408478652;-0.224531210358070;-0.0224045893288376;0.00298292473849103;0.00236455556694341;-0.259674432417670;-0.00191811568180206;-0.262540109068223;0.311418584191584;0.0833469194949500;-0.0407868797033898;-0.376329815807225;-0.274350950597025;0.529193922014724;-0.453096070349568;0.141809702258950;-0.224925045576017;-0.440324202251359;0.260135304056539;0.151624588114465;-0.267667131522788;0.0736071801648118;0.219902861939028;-0.139073516612703;-0.169424399987776;0.0117577670512598;-0.0807986729370991;0.115831213677354;0.951617779193078;-0.451824076194815;0.126895293513406;0.0921891502635795;0.0860482579544996;-0.206432600118832;0.384918191676634;0.136234284239282;-0.135652182324935;0.282284637189919;0.409719427639028;-0.176960053550475;0.0251176882383417;0.0777909324721749;-0.160122753949768;-0.400692370246412;-0.374345545008731;-0.476532629331278;0.0775353958228620;-0.265952237328358;0.0577588415343082;0.353163288071033;-0.189480502136901;-0.818292947482267;0.235464094969865;0.000144659917111342;-0.257299493761787;-0.422586349933179;0.153540514766866;0.0555583462037846;0.308604010176712;-0.137423121749346;-0.892171995501149;0.183931778177480;0.916614910797875;0.418134771780192;0.0371839858141173;-0.192233755645181;-0.667563626273664;0.187713614316189;0.198405719980781;0.174694758376482;-0.388554171065978;-0.0394318105243117;0.0404319425381797;0.421340018588797;0.0576947229319855;0.505665461146281;-0.809466614318257;-0.0684793139729229;0.0450861741112929;0.206157006051149;-0.200927125355329;0.536005522239745;0.0255159087225098;0.455855570213648;0.0874553943281645;-0.277289387337313;-0.727194987633603;0.111847054579156;-0.147056328106600;-0.0132792888275024;-0.121312979416819;0.166028792529135;-0.190869073801494;-0.928579369405262;-0.890965061868330;0.0378929656791087;0.518015894883129;-0.181523468119431;-0.166310563247857;-0.342607579780904;-0.378187910826457;0.607562302571913;-0.104257600653051;-0.818218295166880;-0.163057911290694;-0.226125453266946;0.0562521488839023;0.107909715411648;-0.112970911692467;-0.0192846503486362;0.0415347012919034;0.189735718944129;-0.0282236939258026;0.252787839522796;-0.0211548533519958;0.111180083986765;0.282182234792634;-0.0357826634388529;0.00291175432383401;0.0340229914816968;0.0335206501208061;-0.297614444043670;0.143742206603162;0.472105593272367;0.226738712286752;-0.0109218108088081;-0.398429317920058;-0.548891499404733;-0.590803921515414;-0.501818697612591;0.518763893156518;-0.373388707372756;0.199472443517672;-0.688443723566163;-0.0271796189142466;0.244517925896779;0.527208666479085;0.556705849682683;0.0931798792364664;-0.196937979647834;-0.0454623343447863;-0.207378315572952;-0.262053310905713;0.285961918127534;0.767158139301515;-0.166500548212592;-0.968723526402660;0.501420854846365;0.179735624226859;-0.0868732617715444;-0.325743773997677;0.191830871538813;-0.150535337765755;-0.245948823165806;-0.176861815913965;0.367542219494737;-0.413837088154593;-0.227914888312255;-0.137936508808833;-0.286820645937303;-0.343042172525439;0.318418082973216;0.115766876966054;-0.333999655198907];
    %weights=[-0.110193105336289;-0.00553599729450385;-0.639489687846968;0.504781030970036;0.606242034180825;0.629862660242435;-0.209604168411617;-0.993888502085618;-1.13989639728155;-0.211011613046718;-0.256309696488888;0.719404579479384;0.870426113583881;-0.859858031375906;-0.165747440810367;1.35231888013036;-0.186416525034439;-0.356898947763506;0.0843685418921536;-0.0458194740413785;0.493594870310577;-0.190534143175078;-0.125157017376587;0.484988763443316;0.190344432605556;-0.254199903805303;-1.05171010314091;0.562774252087209;0.141259186407303;1.00952197796912;-0.473271992204746;-0.0270553271589665;0.282252081487002;0.0341570390808680;-0.546728033053129;0.000419838452382700;-0.00733477496374262;-0.534859311443402;1.23149131639483;0.376641055142969;0.164550818312547;0.104829017232466;-0.340321161844623;0.725496921768793;0.00577771583323896;-0.0397937912751205;-0.123273293575736;0.0717007974598145;-0.456487944533625;-0.0328112170585650;0.0174083204953325;-0.225675621466589;-0.0211834638411888;0.00186075786416853;0.00124602922330383;-0.260352715915485;-0.00521148961606850;-0.261411282945642;0.306855089495043;0.0831402995351487;-0.0404845453886673;-0.375726592317753;-0.274071714663330;0.530730615403898;-0.453050319809320;0.140729946066916;-0.221042633173919;-0.438760609012377;0.260686660856084;0.151283175240530;-0.268425236126481;0.0719741104894352;0.218895316131132;-0.141535552166503;-0.168266265438757;0.0124529947575997;-0.0827822440645427;0.115003013250652;0.951459031255380;-0.452306896645910;0.127036784729180;0.0940750295569221;0.0854157475470612;-0.203420871036261;0.383644887538273;0.134834576628095;-0.132529338496835;0.283220434438858;0.409575336469894;-0.176161410799062;0.0245127659104602;0.0735205051843647;-0.160091608041787;-0.406223704731187;-0.373363846404611;-0.474294867073781;0.0728515826314510;-0.267040861158994;0.0589643128550307;0.352500291321022;-0.188783218703737;-0.817148074025651;0.235863759977775;0.000291801528080748;-0.254717104734632;-0.421198506775846;0.155989976928272;0.0556030090003608;0.307811614457762;-0.139576248865910;-0.891117425787922;0.186202861764693;0.915819645033021;0.420080234707829;0.0372733634201362;-0.190399174797462;-0.664313872793402;0.187820568399138;0.198006590092211;0.173816948201208;-0.389325812194737;-0.0397229806864575;0.0411392982643126;0.421799595919253;0.0551788545218552;0.503333463444429;-0.813162819073167;-0.0688771993205890;0.0450825356451686;0.208719664337301;-0.202051891940156;0.534812646125673;0.0264351271414558;0.454233260540128;0.0895701438049966;-0.279727525459324;-0.729419119694858;0.111699177512109;-0.147824925706996;-0.0137375303761879;-0.121677144371614;0.167296438313031;-0.191079631247217;-0.926370888015237;-0.893426491934380;0.0353287805076179;0.516834148273271;-0.181418942429450;-0.166656281916475;-0.340480467360995;-0.378157971115229;0.607239958104588;-0.105606750690698;-0.819366510485459;-0.160755693965237;-0.225126063573741;0.0584057945900702;0.108192407770787;-0.113114296862157;-0.0212320013201820;0.0425517523764655;0.193699244502118;-0.0244348807134720;0.256914229770960;-0.0201602462687140;0.108939640878407;0.286183176626350;-0.0346082343434017;0.00147050663864829;0.0334551716760215;0.0305495478016683;-0.295132463402461;0.141481663938436;0.472748039344828;0.223975445085073;-0.00686102805341851;-0.399458395895190;-0.548766504960616;-0.587687115087042;-0.505434331001753;0.521425177640854;-0.373846299596979;0.203679090625592;-0.692254544449456;-0.0274494418703625;0.241617294308121;0.529115622552433;0.554491147725067;0.0940498112385867;-0.197683083145597;-0.0495836814182201;-0.202721413623992;-0.262803484723748;0.283952586509013;0.770379127991367;-0.170100236240384;-0.967317615984284;0.501067988460974;0.183118052881649;-0.0898384670126872;-0.323650457900476;0.190585484538320;-0.149975302351497;-0.244267620733639;-0.176531574313659;0.368921638268921;-0.417860251718948;-0.222494811046540;-0.138803386437981;-0.284167954535766;-0.335192026124591;0.311307705959003;0.116296044572514;-0.339014741881323];
    %weights=[-0.112034791216829;-0.00515060317992668;-0.651684359496195;0.511054330842485;0.596001419225465;0.621985401230548;-0.225413202681173;-0.994023453356104;-1.13471042580148;-0.201627760885369;-0.259574649735586;0.718347153455876;0.867111356002492;-0.858168113390228;-0.170209650939171;1.35185485658705;-0.188793715687999;-0.356619215197578;0.0872658994539952;-0.0386768635423799;0.490666247827882;-0.188486560423049;-0.127269360279805;0.485781833803117;0.189678635644447;-0.257116533663196;-1.05327308245170;0.562826874863969;0.145857975955325;1.01797331348715;-0.473428844771861;-0.0279617407697554;0.274261305239931;0.0356407243522129;-0.552162057233237;-0.00262433373062994;-0.0178286464579134;-0.534374719575357;1.23270715209239;0.375522835974877;0.165971716383794;0.102819912318702;-0.337371777544330;0.724871088001328;0.00555831550177469;-0.0380843086035874;-0.119603883227188;0.0709915676580904;-0.459103991467715;-0.0337146118164075;0.0213190931089881;-0.227928150124864;-0.0209674987914175;-0.000547212907118383;-0.00260910990338510;-0.259505470847665;-0.00940078748969018;-0.262970422913239;0.303736818875676;0.0766874564995014;-0.0402266827657529;-0.374589381168487;-0.274348486157606;0.534762187634980;-0.449423061834467;0.142137727099120;-0.210290686109418;-0.435481329861990;0.260940550301303;0.147342575621921;-0.271892925720448;0.0727123776736576;0.218183245539574;-0.146909096948486;-0.168458174272004;0.0115741492015732;-0.0891253010982473;0.113038300904985;0.950340786853483;-0.448537911281754;0.127459964274517;0.0960099432696545;0.0851402962180911;-0.200233409137807;0.386866570578887;0.135011851050650;-0.124680758763386;0.284825525917063;0.408187685560565;-0.180777156745626;0.0242136055792936;0.0729200773512668;-0.160329204518131;-0.407988030342494;-0.376882535411589;-0.474603093581794;0.0690863964696316;-0.267434303052084;0.0604545662924898;0.357021863664595;-0.189891660382561;-0.815490290519215;0.234466242510208;-0.00215202965001416;-0.257750348039603;-0.422615223861563;0.155153328304272;0.0562329964527110;0.309096704043111;-0.134851714513189;-0.888657396802671;0.189758201874121;0.912338101050036;0.421567047597341;0.0345811518398222;-0.194516277526756;-0.656994793038090;0.190033195641780;0.198301336469046;0.172859082055839;-0.387374102285684;-0.0426262220649538;0.0466566181978279;0.424984003288172;0.0529528249241585;0.508402468100074;-0.816513505260870;-0.0705384353326197;0.0460074847814422;0.207992764905818;-0.205492151734871;0.533461992772071;0.0302977350205740;0.452840216154422;0.0942719282797686;-0.276453491041940;-0.735806514783017;0.109462788475621;-0.149675886803783;-0.0130232127941523;-0.118496897250524;0.164912878493824;-0.189322713215334;-0.922216814673974;-0.890251070696911;0.0361991338810432;0.519349006298164;-0.181803951879251;-0.168028148128562;-0.347973561619915;-0.378442605418497;0.608020105652794;-0.110184330981328;-0.821257536769386;-0.161144666435968;-0.228170326059206;0.0648874775364880;0.110930380996381;-0.111833817886900;-0.0214152453885694;0.0432951056372764;0.200522826687816;-0.0155600956056326;0.266372491260083;-0.0202195525473519;0.113920491752351;0.291904283175518;-0.0338712553447198;-0.000207836349862474;0.0352841712143503;0.0258542253913757;-0.287300767937949;0.139432097065995;0.473343597846991;0.228001753087319;-0.00616544811470839;-0.396677050514908;-0.549359882111597;-0.583282031681683;-0.512550631483733;0.524579927602511;-0.374691275406240;0.202846502620698;-0.692936729047346;-0.0308744115818211;0.236719139230111;0.523878488837654;0.556752418515187;0.0918995655581959;-0.201743134102863;-0.0540304318885956;-0.206280553608791;-0.260628889386268;0.285988329606136;0.775491379750148;-0.174708505425154;-0.965827728594161;0.500086690794861;0.183378904589955;-0.0916232485296762;-0.322660025552971;0.187922353723201;-0.154350260293051;-0.240987680989966;-0.181469235071868;0.365592602778171;-0.421979795983182;-0.222725937634413;-0.142002173640815;-0.282000068071924;-0.330038170328633;0.302605614007883;0.113604826388478;-0.346846167882350];
    %weights=[-0.0164288045481644;-0.114725888643723;0.134174488147515;0.0461114535030133;0.0306861687428158;-0.00377218105146993;-0.0692404600881091;-0.415404585427703;-0.246223853565725;0.0280007190736905;-0.378204271761366;0.0939616724266307;0.0747333780862759;-0.0458955015055242;0.00741490406473652;-0.0986010437392022;0.0185310389935358;-0.305699036783788;-0.262802172046237;0.0348108985985756;0.0618166873091723;0.318869509973640;-0.0745430585329765;-0.0289016444091578;-0.159090150912614;0.178540511101074;0.0461591759299368;0.0935293600501225;0.0637226668491449;0.0484735599972812;-0.202456238178906;-0.233143750978625;0.0964273697007521;0.0623668519101729;0.223596675131384;-0.0894438069836855;-0.112967634966974;-0.128628982731722;-0.166540805493297;0.347599812446259;0.0584833701086169;-0.205160483234454;0.261592117008102;-0.133509269031290;0.103374041150701;0.110015254231827;-0.0815544833130412;-0.128903025193892;-0.134043119819324;0.0710384352035338;0.00149581555412790;-0.0232405064188236;0.0455786041654609;-0.0358474450224919;-0.00368365436189468;0.0205823963635909;-0.0110991253687533;0.0149397538236928;0.0208047517243739;-0.0173226065886614;0.311578035242325;-0.163806292421637;-0.235377320224783;0.102473230348085;0.430181046859252;-0.0306186094401849;-0.230496035859086;-0.000545734594355428;-0.202973910014578;-0.0435107780605382;-0.246078820759678;0.0192290587674998;-0.0788279930849477;0.0302349843838367;-0.350695475728768;-0.0554360748460989;-0.0557210447267240;-0.110618982275175;0.0739812148661033;0.132034770150073;0.0585375064754929;0.240630332595459;-0.0806708119994607;-0.0221568499053962;-0.0662239166561741;-0.303795922163459;-0.0697362124524823;0.115789321980266;-0.189792718781309;-0.286080197544719;-0.0603804533249724;-0.0464292146212557;-0.309885324052722;0.402230050269606;0.143037805721069;-0.105268316124408;-0.0685066080325048;-0.0734770585409373;0.0578709919552371;-0.121033983778794;-0.0250263098004396;-0.0113628791348996;0.0393238877652391;-0.00686705703370633];
    %weights=[0.216664416207822;-0.0561842014082674;0.176711116557150;-0.212452366617741;-0.0918462163428357;0.143732166479120;-0.141476186511135;0.00602202638995785;-0.0857837884977423;0.101656597790684;0.0209092887247598;0.201595677122231;0.0317854065326659;-0.0837138072063714;-0.0247976346115164;-0.180337060802721;-0.0141366442677164;-0.000663929281815019;-0.0228262737832220;-0.00984000972348027;-0.0818737023462010;-0.0815414281804725;0.00797044536830342;-0.0232032639432640;0.112457983998402;-0.0325650407601449;0.0464180025579830;0.0166443040873465;0.361582228143645;0.123177827246484;-0.189672974819671;-0.136129929759349;0.0268310649016994;-0.0653407169594620;0.0749310082479604;0.0557214204768709;-0.0677662168560813;0.00744968685269320;-0.0899491223079674;-0.358598298750003;-0.235299353924120;-0.0829332977807030;0.0343116816950618;-0.201700854835063;-0.0264466454730315;0.109232113006466;-0.0213519972695996;-0.268891747613715;0.0227292156798090;0.000634916300402377;0.273964185005887;0.139178066352628;0.0757612338677285;0.0481945960826310;0.0455047159831524;0.0588995923576057;0.166546835710783;-0.0582561826097845;-0.132278619822548;0.233611184063195;0.0104903200267905;0.0107363353541678;0.0159291751777641;-0.0534183232396381;-0.00633187209076242;0.0331349392174484;0.00825785763077799;-0.0141811702360318;0.00371724843075293;0.0380992738369048;0.0474310767349208;-0.0777736010700054;-0.0361698771476871;-0.0514801663457366;-0.0443711650435100;-0.0131296424264898;0.138374519328304;-0.0692230570940737;-0.166902952551845;-0.156355094531231;-0.0741432831458658;0.185042003640740;-0.0405598389145904;0.0954947453131315;-0.0896637122863481;-0.0385311134136996;-0.0899065074436562;0.0659647115274320;-0.130858643143713;0.251760291376641;0.240204458039942;-0.135973393934854;0.0265086164745461;-0.132409541155582;-0.00741009489405292;0.0978586201830808;-0.155180627143525;-0.227528571222953;0.165775844762307;0.167510832071876;-0.100203699564142;0.0624101786853269;0.0802665512486193;0.0712413964974198;-0.157110298447075;0.193037065323761;-0.0392556388567297;0.188126994880248;0.0551163487126162;0.110472456358419;-0.0809349131852839;-0.122732031916504;0.0290656478062065;0.138711068039074;0.180705651791006;-0.138366792880699;0.0393197252724554;-0.134092779414633;0.202373618099843;0.0265262864645754;0.0184438429848114;0.0371869320238800;-0.141427458848797;0.102195565950127;-0.0486192609645746];
    %weights=[0.276328373247018;-0.0769548604819283;0.194323936427554;-0.213022629128426;-0.0890547455929671;0.140315638052086;-0.152020011712130;0.0322529754072343;-0.0465116933022992;0.0747127100689138;0.0203296924546743;0.234769035565763;0.0689824359667640;-0.105336694517044;-0.0111951563745828;-0.228112336398164;-0.00689697993198772;0.0374254230901806;-0.0499044757360663;-0.0242623588498873;-0.0617706496413319;-0.0579908519259400;0.0361379367067135;-0.0301699292121221;0.115412174266165;-0.0295700759168098;0.0413577134238571;-0.00915032266281910;0.336605285873846;0.118942777912243;-0.163764060863655;-0.122912125745421;0.0338869956299043;-0.0608052725301705;0.0505515044318149;0.0595610159208683;-0.0753892632496530;-0.0508355138220064;-0.0935309675885589;-0.365612901106157;-0.254009158752214;-0.0966953419685871;0.0494690557012359;-0.227028320857273;-0.0409013935708089;0.128567999293310;-0.0191361397256671;-0.268116291325298;0.0234012851906542;0.00570173864351749;0.278650315013938;0.144736891227062;0.0718061577162308;0.0611003846768647;0.0338765720461067;0.0804660705648001;0.155575670602623;-0.0949361779162662;-0.132980747180201;0.246294293468323;0.0159574717028494;0.0172216310410081;0.0113149196676839;-0.0383615698796992;-0.0198980400173147;0.0582958304591721;-0.00454183499540619;-0.0569744980935942;0.00289809984682523;0.0528962348095534;0.0267919516363595;-0.155584719179850;0.00861924702543293;-0.0640614694506868;0.00451419175892637;0.0412668765541518;0.197149749889219;-0.0366000560772668;-0.145910296231603;-0.162337905522291;-0.0892527589107883;0.200874509531125;-0.0655175660159397;0.0505506179064277;-0.0618151796512686;-0.0423784274286706;-0.100331989532071;0.0792235817192632;-0.106243638334865;0.241028352441001;0.233590990959218;-0.126381393081038;0.00765817425570163;-0.137656581594355;-0.0261085357613112;0.0329675720181837;-0.222171546088719;-0.264216483107149;0.146932845391824;0.191926199635915;-0.0916828226507229;0.0657815446139044;0.0818576607422569;0.0975908054431407;-0.175223937647094;0.197418902080823;-0.0396074188661039;0.229028779285914;0.0397241242545476;0.118135517577643;-0.0386449694588189;-0.0924510149000107;0.0235451384952537;0.156324187483174;0.147279260213724;-0.0945732304280357;0.0668889989607196;-0.113930014587839;0.235402492562149;0.0252644479316249;-0.0649020941778107;0.0183045466021486;-0.228306100048235;0.0603121498034142;-0.0370015189447788];
    %weights=[0.335603950257163;-0.0899130192834979;0.254129059264942;-0.191053949612106;-0.0564526060727714;0.125797806556168;-0.168203145217672;0.0742761791741363;-0.0517657883181284;0.0613118750182642;0.0415123745109720;0.251604882711947;0.102491672045323;-0.113602372685317;0.00889763318633665;-0.266774306777918;0.000707242867556335;0.0553559448983092;-0.0715280183218401;-0.0350145749430080;-0.0444890745132628;-0.0574431661492496;0.0583528008468215;-0.00285369039300244;0.114859538647585;0.00749903079420881;0.0172344712438021;-0.0344205959766977;0.341409025544600;0.127766035104912;-0.175769568633965;-0.122511910393247;0.0406955071779878;-0.0511901519172293;0.0677174479434485;0.0755413937893400;-0.0964815200480249;-0.0384506733666310;-0.0937218026932063;-0.360369816665426;-0.279406609547098;-0.106400580090803;0.0489786995962288;-0.217567268571421;-0.0481777010264438;0.129759600630289;-0.0121030982848827;-0.274637663587301;0.0313593946270306;0.0232158075522013;0.270808282275547;0.140196967237150;0.0799009258544720;0.0713958496658567;0.0262341705997474;0.139237240646277;0.120627122331752;-0.109476236567425;-0.120422753613300;0.259145535916188;0.0244610833344225;0.0129799395835589;0.00382277392176374;-0.0580904001915148;-0.0200834787276041;0.0659212375962425;0.00419024628502052;-0.0598749844996846;0.00446977977878364;0.0500763488064226;0.0423588385294583;-0.197800017742088;0.0258279774232828;-0.0597820099520524;0.0424660267262351;0.0568891067480257;0.232214297638255;-0.0301593168470152;-0.158052147687773;-0.160287242817879;-0.0459627647490633;0.240484844288024;-0.0820738700913610;0.0478546722961001;-0.0294676144909005;-0.0561777789483691;-0.102218290015265;0.0869016041592037;-0.109700201687754;0.255635080787230;0.239992444749675;-0.107558922544211;-0.0162071408075553;-0.145408826466212;-0.0168069336971924;0.0163377224706380;-0.240321342657631;-0.288899446424353;0.147697141682451;0.239966716182525;-0.110740588487376;0.0800279163565822;0.0658831768074422;0.0867837856736161;-0.150275814832370;0.220585304390588;-0.0352534018898866;0.258440586619659;0.0303110919919208;0.0978850364527808;-0.0458080627844788;-0.0981960679608771;-0.00185905045725139;0.168823915142895;0.118106357369205;-0.104698811593203;0.0897156309825946;-0.129972229891715;0.222652590060000;0.0514949352286173;-0.0470157543042370;0.0255965574087120;-0.217787841744688;0.0724236825911140;-0.0595658585007271];
    %weights=[0.430982112327237;-0.0322248341697963;0.363363339118887;-0.159099063483983;-0.0313470680018566;0.0900622155829757;-0.272499200103577;0.115738926009553;-0.181888642214954;0.114449868636734;0.0593376210503474;0.250718638766617;-0.0229389755776824;-0.152388961509457;0.0158945859863951;-0.318109702004426;0.0363507379395179;0.162458486006824;-0.00935741107739396;-0.0549876905897704;0.0646322744610523;-0.0853399493078005;0.133109237691454;0.0331272343521139;0.0638953696652797;0.0612782567893528;0.0243981622736926;0.0729458528036710;0.367002682979241;0.105216481676059;-0.230938722543019;-0.202431588601641;0.00401756424655174;-0.0187275145460811;0.0266333064435504;0.0809208978677718;-0.0812097917591618;-0.0631665892732610;-0.137259306827638;-0.331755401215535;-0.248999452137903;-0.291043149841017;-0.122081392727347;-0.246456797364730;0.0414258675331008;0.204293094909448;-0.00366840844162181;-0.314503447386265;-0.107092955159084;0.0892814657277425;0.261134324363005;0.214359781868934;0.0757748928877896;0.0116147958775444;0.0289031727839512;0.0985407811766907;0.102094845792943;-0.0558328086371777;-0.111094876921100;0.294425868162556;0.0703270329184923;0.0252598594042926;-0.0102826616602957;-0.0540677320032585;-0.0226898811629813;-0.00614269214807049;0.0129054925552073;-0.0194529518023593;0.0359078583602713;0.0194783904368790;0.0412254537166521;-0.190766130310766;0.0684648642335850;-0.0298360734873610;0.0358514422663237;0.0702716120252742;0.203501611661647;-0.0576907118104724;-0.151244342394039;-0.189751411484856;-0.0663695788235285;0.213700142663653;-0.0841642198506184;0.00225129833904212;-0.0182528833714149;-0.0496789059227863;-0.00347481141866937;0.0371311893728668;-0.100386015575671;0.323633805190690;0.228115931203174;-0.202825459147614;-0.0421243697468213;-0.151001767522746;-0.0216412821477574;0.0891804632872118;-0.0732664639164553;-0.291454518397929;0.0771341394680971;0.294604690061949;-0.0766531970276593;0.0488669494206036;0.0337762962742006;0.104736660007224;-0.148906332799839;0.189898038058685;-0.0154721117489086;0.227060390113418;-0.0283797001817889;0.105541440348500;-0.0493072983832323;-0.0744898053289963;-0.0448049753228315;0.164537352616864;0.155212373844239;-0.00877035775193556;0.0388274374628467;-0.225732787940116;0.201673571393237;0.129040665655377;-0.0388042284424109;-0.0758604402738799;-0.190123452542480;0.0142798953487597;-0.0560285915556299];
    %weights=[0.425733527513255;-0.0777123566624227;0.340089526358886;-0.240178374727924;-0.0632651246533956;0.104352692491280;-0.273645998207587;0.128454384156123;-0.161787192997299;0.104123914235099;0.0564547655963611;0.231854200061014;0.00166604220895987;-0.111857571047204;0.00361405268120596;-0.282889408388700;0.00924998125989949;0.163510950355578;0.0337365846500972;-0.0251366814128513;0.0896994885225038;-0.0587195486667257;0.225003454535235;0.0282441687926972;0.149883340452972;0.0909010549466271;0.0138833158356356;0.0553621240917992;0.375757004290339;0.139075134025522;-0.237763625247639;-0.215291913111513;-0.0176716743589126;0.0111994770305066;0.00291907888891181;0.128115462410908;-0.113021190935661;-0.0433336720029816;-0.137589336225230;-0.337954811443842;-0.292276428757918;-0.281107950915178;-0.108377542438032;-0.241030766489371;0.0165300057870068;0.282945692166949;-0.0358921361102468;-0.326313775683995;-0.102254480918514;0.0707811455476424;0.276348263937481;0.203809780197969;0.0540677318181107;0.0134516344373548;0.0126688859576117;0.0778192299752583;0.115740674601984;-0.0455654507437305;-0.0982198091750834;0.296720240257727;0.0729287226877711;0.00717956407518784;-0.0285315436353608;-0.0356313267658987;-0.0312289487416080;-0.0205140563265896;0.0170641106208256;-0.0278025519848130;0.0568141778579105;0.0276638575062073;0.0170624960071605;-0.190996927091412;0.100356808226763;-0.0152055535259735;0.0839453828928811;0.0558596871290544;0.188908139663453;-0.0450760368215907;-0.128843545653746;-0.188870230436868;-0.0191171796880267;0.240828894778556;-0.108542161042853;-0.0209310450924165;-0.0819116089452809;-0.0147858292647894;0.0435770704247555;0.0263955160845279;-0.0781429832355425;0.306511754160578;0.239604224333378;-0.197906766973082;-0.0800233296651478;-0.185570753178521;0.0107483248881403;0.0978974836438852;-0.0685193006426669;-0.287895276803729;0.0797205673610540;0.270018231919121;-0.0591470628733151;0.0938674599970926;0.0112922170075034;0.0885225420178258;-0.136828680053334;0.209040821164925;-0.0281518378943156;0.223902671883738;-0.0288130784143479;0.112111986768308;-0.000534850347502868;-0.0365796684951019;-0.0949079086900115;0.128398346612774;0.147822399932245;-0.00261855225963264;0.0388696654573910;-0.252914045702272;0.187484812885191;0.0926533592782128;-0.0834694625399716;-0.118182993568742;-0.180906616619369;0.0356765526815476;-0.0370456507652236];
    %weights=[0.454511004262363;-0.0514945236969266;0.337326068566480;-0.343747278514698;-0.0699117063424185;0.0996053284413279;-0.251992456486902;0.0908130306798807;-0.150677603960602;0.127802947322497;0.0418167668479001;0.236754823725806;0.00221881593875743;-0.0506138321504994;-0.00442891243856581;-0.247582030571535;-0.0309219779099373;0.183567830213754;0.0584123231449104;-0.0195237418533759;0.0855636664437280;-0.0617704880971237;0.221744202255732;0.0294518101970513;0.174402698662714;0.104676707581832;0.00448237992142435;0.0685578540683972;0.374295762054608;0.148539924683976;-0.230884784700307;-0.218368789144522;-0.0157895391565743;0.0368297003987145;-0.0361264582988219;0.137758473936429;-0.126918196290268;-0.0534863635505463;-0.127266354466928;-0.350774296622943;-0.254426258702522;-0.269865318014390;-0.0849952449670086;-0.223716857911044;-0.00443242036054502;0.315355964579459;-0.0524715555648552;-0.314128764590724;-0.0861481577549106;0.0686587537277686;0.251423618395959;0.201855259731835;0.0488147143093076;0.00237026857962403;0.0301981166498920;0.0556762072681196;0.120018895877274;-0.0341624559837211;-0.110470049852854;0.278235738317984;0.0569480632721280;0.00335687063609446;-0.0189688280985668;-0.0246460945924848;-0.0471937761311355;-0.0247106536635188;0.0226199743020495;-0.0494522947692999;0.0570059689965963;0.0404403707200988;-0.0179136521244229;-0.156481577377478;0.0840638615301708;0.00349005009104132;0.108662621035275;0.0640602326059859;0.189267927484593;-0.0357670629657709;-0.125454492265145;-0.192874308700229;0.00442797645112039;0.205413001093763;-0.130347258575650;-0.0270185149692465;-0.133451802517984;-0.0108858557023814;0.00937153152655235;0.0267288001268349;-0.0585076357674811;0.291543471073752;0.253826623851651;-0.199643536744918;-0.0734464998595773;-0.198028495208388;0.0302983538930301;0.0942360825474883;-0.0782461190910629;-0.295405245483222;0.0836150798129128;0.251248258083985;-0.0429382445910248;0.0722383857660903;0.0227741161885479;0.0966722363556536;-0.146511546786195;0.206322033017101;-0.00634628102558252;0.225723984439478;-0.0379456689749493;0.126783512741419;0.0172466432848511;-0.0274522854827986;-0.101434617283309;0.110618419732128;0.163722497731188;0.0434979569847931;0.0362616916801692;-0.254223097706363;0.174153478104584;0.0885163474333796;-0.129498092033898;-0.115909865386098;-0.199495805125269;0.0530142666148161;-0.0484768076583176];
    %weights=[0.444653157859525;-0.0772373535491688;0.259458959476108;-0.431543234809151;-0.0219665356998119;0.120544698981326;-0.210045543873963;0.0123516336850170;-0.126814864678784;0.118954095708394;0.0300639666651961;0.257454971572632;0.00563536586330643;-0.00239347169761114;0.0424181546126917;-0.234752762206004;-0.0845848192628877;0.218987712590441;0.0457194375702632;-0.0501888693880065;0.129242316922294;-0.0740937215227213;0.195471347837134;-0.0303552586494748;0.110342259338010;0.0980069055284758;0.0182744324015382;0.00675079261388690;0.390349448947476;0.192524309120613;-0.260274918865412;-0.242955943694838;-0.0223931358382810;0.0424122546859437;-0.0701479347184241;0.199383490792113;-0.108817049932199;-0.110945786318260;-0.0839258380325724;-0.357208023004152;-0.251571479295874;-0.286294590177775;-0.0844963679237389;-0.154498724614440;-0.0839619206501430;0.350900747877920;-0.0363714371468094;-0.298159620110065;-0.0655520820598164;0.0329668755068917;0.275349412541294;0.159731036807192;0.0936578860209794;-0.0979925581198086;0.0215539199621105;0.0406678692046835;0.148830104000634;-0.0625614850075174;-0.131980528528294;0.330445237320655;0.0783199137391847;-0.00747617841973477;0.0100835898233935;-0.0401353657627161;-0.0670954404230934;-0.0312053387214528;0.0296001441209661;-0.127411277440392;0.0345433467896926;0.0512240918275876;-0.127091345638228;-0.0905507883878780;0.0520636217153398;-0.0395793893031984;0.145629563596379;0.113410689839666;0.175430979429336;-0.0229307629461175;-0.149569239846111;-0.186325764239723;0.0220198533053952;0.101737808644584;-0.122136087410894;-0.0140938662479222;-0.218629698255534;-0.0452463787838265;-0.0550037187524074;-0.0571325128685558;-0.124622701426485;0.309781377332585;0.275883292184712;-0.191754529206659;-0.0225618519672243;-0.121344901548302;0.0590979727327524;0.0184567469600194;-0.0674628301859529;-0.289538731336096;0.136613008223044;0.250289435427188;-0.0339611339117259;0.0284417539924158;0.0164893957892980;0.0654214811951119;-0.184420153324146;0.272551510661464;0.0944923934357935;0.232293617030903;-0.0776031658230806;0.209243161116962;0.00827723762340604;-0.0199243045669744;-0.0419165658398330;0.208823047185948;0.199055342013786;0.0407806398808096;-0.0227240774312342;-0.143545813948934;0.332536523533684;0.0815406736604328;-0.220057158585425;-0.108750625925704;-0.227611102030878;0.0877796641089780;-0.0641237227216692]
    %weights=[0.472016451280314;-0.0844362975642901;0.276871333336095;-0.460968054384123;-0.0104679320508295;0.141781487548401;-0.259889439534995;-0.0576441422547577;-0.0866185071227091;0.0828790932216872;-0.0404706368484870;0.226574126589896;0.0234074303669243;-0.0261547203207186;0.0115026233447763;-0.266701598642813;-0.114113087335757;0.227218602637586;0.0590312690360485;-0.0342215164556634;0.136964322140449;-0.0489455068719268;0.154499221165882;-0.0856112882427608;0.120402855196160;0.0430754108251906;0.0169861616089027;0.103750770088349;0.375379737886426;0.207199494795506;-0.135718149213489;-0.308892173396038;0.0669727675060838;-0.130116389996841;-0.0381341051234207;0.275074232998009;-0.0144613743156494;-0.184562906867370;0.0492600140552684;-0.296896145341677;-0.245769729700559;-0.268022831531137;-0.129145406222537;-0.141719057503160;-0.0857460172616960;0.309271624531060;-0.0954156794542986;-0.239967441900629;-0.209718691096320;-0.123466080462387;0.280699055368125;0.156471976934358;0.0378428190013721;-0.0739514219294907;0.0377539959088834;0.00531689583774027;0.154554559629163;0.0321217334701734;-0.143629256588317;0.353537000847716;0.0411506115420471;-0.00102423948242680;-0.0220245543019963;0.00733380455914031;-0.0517990289785173;-0.0316059889227054;0.00580924887267354;-0.0974694935759722;0.0324647049692924;0.0956119065277827;-0.0812234518963149;-0.0541636299189544;0.0284812180779601;-0.0707106776711466;0.0864967873024376;0.0814247307895574;0.143621640664067;-0.00503306758942649;-0.155864660086617;-0.185497200589902;0.0761686011771288;0.121771701652398;-0.110537548482393;0.0476996840859891;-0.253639835837495;0.00366829883931736;-0.0382737738154084;-0.202810263464744;-0.0466245265101278;0.204731722186397;0.268244258474703;-0.186562156628751;0.0133770661446654;-0.117462357349541;0.0623331248354436;0.0447695734968211;-0.0322580779167104;-0.276533187235320;0.114175948021034;0.275934044236550;-0.0354917979729432;0.0723059435415846;0.0199429253721997;0.0395763446569952;-0.230915362820010;0.267553569224428;0.0819469218462424;0.214092107992300;0.00611780290177454;0.178514129438162;-0.00393263303705449;-0.0251370104750615;0.0232544993197050;0.206845868189360;0.235447182927361;0.0204199838520726;0.0129900572396786;-0.0572239494333801;0.205757767631159;0.120817527485729;-0.226056841212887;-0.130920812059939;-0.214263771873652;0.0404310410436053;-0.0203384010026158];
    %weights=weights*0.01
    %weights=[-0.672031047766326;0.829224639279840;0.669440776264533;0.301160493431590;-0.467890520986159;1.06511861235716;0.431704344180007;-0.0753730362880718;0.309977354344131;-0.147748093029541;-1.10235080533932;0.0170563922993944;0.0579717286788629;-0.358767136101148;0.710088014794429;-0.406520633684391;0.259204383223480;0.754198075650326;0.586400589717072;0.262375057608040;0.274199266241746;0.484546130816772;-0.205196642323209;-0.660411565536850;-0.103211776957211;0.00501142887597864;0.0785335851344729;-0.0151291559342285;0.0297319155582084;0.0442094055955585;0.141119698028896;-0.385616675763473;0.110769295024354;-0.396295761670240;0.806926060453035;-0.585915650937678;-0.273426522961384;0.528281447556846;0.0294882473924283;-0.475585017708426;0.188488516287383;-0.489276362918636;-0.00310295186318996;0.0571251273616436;0.113419731511174;0.0948356197332957;-0.202988411811610;0.594200756129755;-0.195177395411291;0.655652775258918;-0.462683266337837;0.00721610387545603;-0.663569604806368;-0.183816071951530;-0.675791878303837;-0.00536869797714658;-0.0645207211213087;0.0409270765192734;-0.00100978375548424;-0.119585656101880;0.354808368183987;0.188926179465341;-0.0876201248807148;0.302078699179600;0.0462495058732276;-0.0949559649015077;-0.336525284872854;0.150325618823929;0.00426746273384054;-0.0348514475880666;0.365144490100846;0.187515401943930;-0.304876049987337;-0.000429762745056280;-0.811839127687717;-0.966482941822377;-0.697540368294210;0.155024147633340;0.00966177335621070;0.0224698800311049;-0.00488632616272839;-0.0690920737926791;0.173862997949742;-0.116369324344325];
    %weights=[0.287297146568521;-0.232136300676850;-0.439148808943470;0.172342543341668;0.329604274401096;-0.0770446879778324;0.577754220942336;0.0627798698990438;-0.0906040894304668;-0.316357016549619;0.134320812286420;-0.0165727583414233;-0.547128766407957;0.325709790452101;0.109986894530249;-0.0608015246264047;0.201992389048290;-0.0753175121213583;-0.0767075296909024;-0.158585870459242;0.194698174556864;0.203796644689472;0.0358699109719022;-0.0543229344728768;-0.334213341989478;-0.201654208190837;0.0620687859887317;0.0784849521317786;0.0306119616947284;-0.137379319348607;0.186133484981716;-0.0121555388020375;-0.196954920923727;0.130868194582999;-0.142983522996354;0.206542111040496;0.0576843140032763;0.235728392277159;0.316546770975642;0.00519652964764071;-0.151114608899205;0.295050061843147;0.124747320999456;-0.151203214803291;0.220247971500551;-0.0806723619290969;0.142985454349479;-0.00124797242639919;0.0168615199061211;-0.253359260214941;0.0656876651321341;0.00631449908418972;-0.114928902563220;-0.0936734361088532;-0.207081952135085;-0.0255563468004884;0.0528461445890357;-0.146974111924762;-0.107541952493128;-0.0327210398308166;0.156719229950675;0.134197165712403;-0.00531813184935180;-0.0770794191378641;0.243670965479539;0.259441965926627;0.243273936517044;0.0723157513053018;-0.0841133821470897;0.164657336162100;0.367500529911073;-0.0173753204209371;0.135801804976913;0.177274365468147;-0.306827187153291;-0.172656939823782;-0.0327211357948149;0.209166563153026;0.0211268533282889;-0.187170412053433;-0.115328662516275;0.161793842749945;0.109363304537924;0.101623816787793;0.218531066865293;0.0926631281667372;-0.138342396101582;0.0415916849282593;-0.215337796710508;-0.0957744616574266;0.135614166017812;-0.192918433271415;-0.205678812946583;0.0273609024215376;0.228519112084228;-0.258744016024481;0.00493810652150671;0.261744337047784;0.0482414832807204;-0.103540646264184;0.00964885629688508;0.0669452130785690;-0.120557786319136;0.363961961019979];
    %weights=[0.165292728347363;-0.123870009886014;-0.347464537021326;-0.660754114041801;0.315021185326365;-0.791421697378475;0.0119350295955878;-0.855278611511514;0.212448754278363;-0.298787361789244;-0.0850857871526428;0.623349058835802;-0.758696815344142;-0.300195306069009;0.105299263723264;0.178069288786571;0.286886382410713;-0.194353999825921;0.235021142194046;-0.309784757412808;0.175485470427524;0.0125100994227298;0.0101519858337430;-0.374332637052652;-0.158500579495351;0.457299738616523;-0.659603033237701;-0.384573265802437;-0.0165800185208242;0.550835510740655;-0.107265910997749;-0.431290281489880;-0.0358714721143803;-0.162855559120646;0.0754403784807964;-0.285533740364996;0.143447532747457;0.0263367835340943;0.0555493745925538;-0.450146704507817;0.490887502195066;-0.146050245836436;0.114059725557801;0.111347397873375;-0.00698465965822978;0.0476979520895016;-0.0646432593034887;-0.539783714562447;0.0901938543243983;0.102912695849791;0.0823168606690195;0.0750750666703329;0.0568591238248846;0.0454542700497903;0.0440122408245207;-0.190433894573243;0.00456161495957235;0.265360007320317;-0.0452889816963434;-0.116685035300704;-0.0844359760993838;-0.416789176992834;-0.00658758740973454;0.00879053482909079;-0.0140798910828210;0.129110591178878;0.344994596681292;0.0541779088343653;0.0190012181325786;0.377637824305871;0.235308175423362;-0.0566847346949480;-0.114168582952789;0.0384723531903686;-0.192836592625049;0.558841292062334;-0.0637655438986408;0.289788150935897;0.0112527046345513;-0.234933717690970;-0.0194579853334324;0.527601137587677;0.0663036180326984;-0.267834594002935;0.567894174974896;0.132074552518651;-0.0659672670390183;-0.0425578517097745;-0.484324194693106;-0.401794485115835;-0.0995379287870500;-0.259359460717897;-0.0778663564986640;0.152992712499603;-0.140562364273971;-0.103308173170570;0.519351755391457;-0.102019471460706;-0.349932411948332;-0.334425449356519;0.149114848729710;-0.0451470536446193;0.0404013931234943;0.0312247535886284];
    %weights=[0.194838389484190;-0.143287330799137;-0.551090674558837;-0.728190361487514;0.446773376542384;-0.782616146735708;-0.00104823936238275;-0.842150130869849;0.279333633244736;-0.423119109107269;-0.0263223917711843;0.685144824791525;-0.899173676716840;-0.254724795208104;0.198667650922214;0.381951182911759;0.183837125716870;-0.291440869527997;0.375588560266184;-0.401770310246589;0.200784365615261;-0.202391390690157;0.0227802182272173;-0.478299228608118;-0.217265769391553;0.390169159677120;-0.803300158444579;-0.527290960773274;0.110092656804079;0.684087836142217;-0.0707704013392744;-0.459629755977279;-0.0763280290825647;-0.213152833074700;0.0730814135423908;-0.288950038403599;0.198184341461369;0.0218644452654320;0.119595885063387;-0.615961580912066;0.533450283442704;0.180872970286708;-0.284190104176918;0.159185426842616;0.225061584382571;0.183413642748958;-0.160068811092993;-0.546142583401824;0.241691654223581;0.0527674401683093;0.111030514625233;-0.00499434778329032;-0.154019211189963;-0.0307928360821500;0.0574426681914151;-0.222819186915200;-0.0489688876595719;0.373767570809076;0.0205854999271631;-0.294101065712272;-0.0439426437476350;-0.454987603790474;-0.0987523237220123;0.00459184642623814;0.00683613964592529;0.216134470812593;0.562784376742928;0.100759863388796;-0.0924297914612165;0.409443631710034;0.224329413950200;-0.0459494593696155;-0.0522103316194096;-0.0587083452607711;-0.137125565955270;0.658586845942154;-0.0554052657576237;0.418300589394166;0.0870373293279923;-0.198997011610438;-0.0542781694677537;0.601493950046386;0.202171302665229;-0.250764918340297;0.557709512825870;0.167113777003699;-0.208781280538545;-0.0792991894957063;-0.479877994838900;-0.393440189636411;-0.178981481783085;-0.314090246005871;0.00763496924976515;0.328065381340609;-0.105067064460223;-0.110603391425217;0.588422274371365;-0.0323484707690366;-0.661133911926255;-0.459662302068587;0.200248027043602;0.0260591429979384;0.0507600307061412;0.0346879188652512];
    %weights=[0.198926960081491;-0.144926734168852;-0.595754830843281;-0.715276613065585;0.481683581632503;-0.766971310947474;-0.00386493161541421;-0.818824923485964;0.299062485564783;-0.449126566001688;-0.0466177555699863;0.676520154908235;-0.921436914866127;-0.228680649052086;0.182514607544217;0.425211223088668;0.180457050156421;-0.316692463116864;0.379952894134304;-0.391234051618653;0.201911556489311;-0.293199984178936;0.0436440961197552;-0.519114252191527;-0.249587154156479;0.358283046189901;-0.871047733459170;-0.543799494106443;0.167530790264107;0.691823160453562;-0.0521226369591117;-0.466909348548893;-0.0764070297213715;-0.248038297908467;0.0769140013781422;-0.269038942917383;0.215971231339303;0.0511918292935273;0.120033148869678;-0.649481959524975;0.540792071446377;0.211613291354189;-0.361361648527351;0.161486606119160;0.269037049250683;0.229387642357190;-0.175048975032061;-0.527855035500320;0.254963304999576;0.0241652696102233;0.111753037476000;-0.0362102460592839;-0.195603572258472;-0.0582474539911339;0.0499558164956046;-0.233576464847401;-0.0584243459707937;0.369783266877650;0.0521905817629329;-0.345316210228906;-0.00472477510758091;-0.455256344871810;-0.113247252723287;0.0136395245871832;-0.0198872647655981;0.202455176798883;0.617609358833407;0.113227016831111;-0.0946653690302854;0.418624102613451;0.235652017116676;-0.0280484301206417;-0.0588702478838997;-0.0362485648071241;-0.146601521223868;0.667702705243976;-0.120779265409248;0.422947246952749;0.0869797807406825;-0.238939300881521;-0.110187857482157;0.612811841622332;0.210950388132917;-0.238168169870965;0.571335221555840;0.182807326887495;-0.252644545307322;-0.0786019761052177;-0.465691270503391;-0.388359124051600;-0.171969768640696;-0.335419079726405;0.0298859115900444;0.364781065118524;-0.0843075971377663;-0.103105637235480;0.589561689118695;-0.0423478752975507;-0.730051559841800;-0.516554698521146;0.234365113257819;0.0346262036095873;0.0452444429436037;0.0266244242728982];
    %weights=[0.198904813991824;-0.144930731335369;-0.595743948018836;-0.715286441977203;0.481686062111752;-0.766976446421774;-0.00387579200676794;-0.818814891862071;0.299084998449668;-0.449127653980349;-0.0465888462711711;0.676520752337807;-0.921464188156798;-0.228681735582696;0.182501508205712;0.425209463639864;0.180475890441181;-0.316687729389691;0.379939241321219;-0.391218257748988;0.201914840365359;-0.293200457465292;0.0436433466281391;-0.519115726872948;-0.249588353450756;0.358280755072267;-0.871049869436603;-0.543795970779920;0.167530547317665;0.691824045757986;-0.0521284372001148;-0.466910234892158;-0.0764096982986311;-0.248045739672621;0.0769063417859878;-0.269034656704172;0.215967986431648;0.0511912461280494;0.120037336417929;-0.649483666876466;0.540789921456255;0.211619974419264;-0.361348666799805;0.161488984980957;0.269053668864241;0.229388577577274;-0.175046607925438;-0.527852437315057;0.254967951409470;0.0241634476448517;0.111759342122297;-0.0362122082367993;-0.195603761686849;-0.0582371782051760;0.0499581414867047;-0.233582784872011;-0.0584234004000306;0.369788612496781;0.0521884630983254;-0.345316970836978;-0.00472930169547233;-0.455242837360049;-0.113239968073052;0.0136381244420171;-0.0198800780300559;0.202444409408381;0.617610073532462;0.113218814780965;-0.0946766148818912;0.418638912648726;0.235664546895080;-0.0280409052876446;-0.0588717431066586;-0.0362406462436856;-0.146600564392487;0.667703382475668;-0.120785376475991;0.422955711352877;0.0869792136131552;-0.238934478815151;-0.110188354655438;0.612813468031791;0.210950393270379;-0.238170496576201;0.571338189133323;0.182804086678568;-0.252658377964298;-0.0785971013604034;-0.465689362998426;-0.388353604528119;-0.171975465826470;-0.335410156305662;0.0298963065883320;0.364775909269941;-0.0843025029093685;-0.103103416568743;0.589561164797726;-0.0423472772762722;-0.730047096766948;-0.516562902786612;0.234359944881658;0.0346262722922190;0.0452344413636664;0.0266310325340029];
    %weights=[-0.0483294901484935,0.866489609258276,0.258249480427777,-0.282885450280905,0.0643035629369082,-0.512312463152310,-0.818583146273810,0.0332158197189229,0.512337417934393,-0.387020079471681,-0.000579866755716654,-1.11368080121941,0.303127501111891,0.143729229944850,-0.319018994741017,-0.0789934495920547,0.197927069473988,0.900564582491867,-0.231045878219591,0.659298015307956,0.345417975574539,0.0161504046447050,0.347388389075699,0.0439248136852328,0.0249523647656290,0.195482360958561,-0.162899889576667,-0.635145383426142,0.319845414239749,-0.191295936190312,-0.526106543991694,-0.290061683285995,0.0355105311803602,0.349936467509051,0.0790100207407535,0.0453900302091876,0.539153523459000,1.16550565212534,-0.322670405011067,0.269570934999888,0.588761862824927,0.512322885062045,0.270821850117883,0.164768374188337,-0.0256189692346074,0.101433276580688,-0.319683495287560,-0.788206612791024,0.241594371285718,-0.468456491723311,0.178717811929928,0.146166229198150,-0.00785454638449266,0.0149779179353415,0.0874841704311685,0.342326897515203,-0.177210661021750,0.479703923981298,-0.0107996768483975,0.0852240608845607,-0.449881331676423,0.339311441267960,0.0197253335863597,0.0263413750253922,-0.0573352273214155,-0.238738304311427,0.167602535550428,0.343471019723816,0.324282453499957,-0.285372541846144,0.108887219786820,0.913763195089452,0.282025942156181,0.199858133955264,0.0757368912575748,-0.102521438366631,0.822806128222937,0.221283619995974,-0.0454777354350810,0.184076008715268,-0.345067419184912,0.801893715916946,-0.454814677709171,0.00309698428175191,-0.391578572181951,0.714075533256970,0.691986951363160,0.674606900616471,-0.584437724694123,0.263287064016650,-0.0216740284499986,0.225790504269300,-0.0387994019023919,0.0452461191964368,0.178614251611560,-0.166014207658022,-0.0685236648330160,-0.102704850406961,-0.0977761620440000,-0.170228527053163,0.193445880700305,0.315861011323509,-0.0255280621148430,-0.101696729775733,0.0242545520912328,0.0489562330950497,-0.0867818478445756,-0.449418793205637,0.0331113741079679,-0.274868633362427,-0.230391748325339,-0.775108025764371,-0.0565413835307499,0.605813901239218,0.0366813711666757,0.0484390393177119,-0.0599353517713377,0.448971994960380,-0.0449029314943496,0.0123750721625076,0.220792239530293,-1.23463517513047,-0.0259218587869420,0.201014210727343,0.0569418188650119,0.00415840422796261,-4.41909622124614e-06,0.728591306307242,0.185839484971477,-0.0961196557841251,0.347106623269596,-0.567061717647180,-0.0280438289753907,0.0243469244396473,0.178770546088693,-0.0825526546268798,-0.117449788677669,-0.178380630242829,-0.218249144781500,0.176310295198184,-0.0857216565523837,0.108290274314789,0.0801240100087235,0.0592464536942844,0.164310028177363,0.0236459548248965,0.182211521672890,-0.0578282711118885,-0.415592082589518,-0.0264202464446028,0.264319714066635,-0.0639029208343992,0.0393970052688849,0.0228687180626637,0.152573273040824,0.0353725283454439,-0.0518183271276769,0.329004849496507,-0.0621105206139621,-0.127061128100633,-0.684063364545778,0.398984527933385,0.0208486285801235,0.434913516611103,-0.385692934390455,0.00617340461540283,0.236133332369592,0.0837264852344921,-0.0350684076288384,-0.0522978124639690,-0.663978638673790,0.812247389804191,0.207535963045692,0.542325107794471,0.319681777739400,-0.00100203147306687,0.0951841461474590,-0.492957643565284,-0.0586069671946793,0.0843365413460224,-0.159643378271925,1.40173290815142,-0.164863648186735,-0.215033173200121,-0.373043684348764,0.0306705907678066,-0.116937416347741,-1.09905266926531,-0.738436211688629,-0.0524908850640483,0.666893713678837,-0.736296296125462,-0.229571563968824,0.0234733759916313,-0.181199739744524,0.0919828406087207,-0.156614849995377,0.207701761066014,0.0130998607842187,0.0390039352797979,-0.262269315525283,0.576329779273982,0.246356777152104,0.335663586111465,0.335226705794004,0.0471237160621254,0.0102751673776459,-0.713840372555889,-0.0293113193582224,0.241779831910317,0.164474485712505,-0.177460244248467,-0.0103918026184421,-0.170149374675239,-0.104495133974930,0.0289483359657273,0.0133937454745114,0.401755178924345,0.394010842620423,0];
    %weights=[1, 0.5];
    %weights=[1,0.3,15,150,0.007];
    %%%%%%%%%%%%%
    fprintf('ITER  RESNORM    [C]train   [C]valid   [C]test   [R]train   [R]valid   [R]test    AICc       NW   CPU\n')
    if projhyb.method==1 %LEVENBERG-MARQUARDT
        [wfinal,fval,res,exitflag] = lsqnonlin(fobj,weights,[],[],options);
    elseif projhyb.method==2 %QUASI-NEWTON
        [wfinal,fval,exitflag,~,grad] = fminunc(fobj,weights,options);
    elseif projhyb.method==3  %SIMULATED ANNEALING
        [wfinal, fval]=simulannealbnd(fobj,weights,ParsLB,ParsUB,optopts);
    elseif projhyb.method==4 % ADAMS
        [wfinal, fval]=adamunlnew(fobj,weights,ofun1,projhyb,options);
    end

end
TrainRes.finalcpu=cputime-TrainRes.t0;
projhyb.istrain=istrainSAVE;

%
%sort optimization results in ascending order of validation error
%important to select N best models for model aggregation
%
[~,ind ]=sort(TrainRes.mj(:,3));
TrainRes.mj(:,1)=TrainRes.mj(ind,3);
TrainRes.mj(:,2)=TrainRes.mj(ind,2);
TrainRes.mj(:,3)=TrainRes.mj(ind,3);
TrainRes.mj(:,4)=TrainRes.mj(ind,4);
TrainRes.mj(:,5)=TrainRes.mj(ind,5);
TrainRes.mj(:,6)=TrainRes.mj(ind,6);
TrainRes.mj(:,7)=TrainRes.mj(ind,7);
TrainRes.mj(:,8)=TrainRes.mj(ind,8);
TrainRes.wstep(:,1:projhyb.mlm.nw)=TrainRes.wstep(ind,1:projhyb.mlm.nw);

%
% save final training results
trainData=TrainRes;
save('hybtrain_results.mat','trainData');

%
% plot training results
figure%----------------------------------------------------------------
x=1:TrainRes.iter;
size(x)
size(TrainRes.resnorm)
semilogy(x,TrainRes.resnorm(1:TrainRes.iter),'Color', [0.08 0.5 0],'LineWidth',2,'LineStyle','-')
hold on
semilogy(x,TrainRes.sjctrain(1:TrainRes.iter),'Color', [0.2 0.2 1],'LineWidth',2,'LineStyle','-')
hold on
semilogy(x,TrainRes.sjcval(1:TrainRes.iter),'Color', [0.2 0.2 1],'LineWidth',2,'LineStyle',':')
hold on
semilogy(x,TrainRes.sjctest(1:TrainRes.iter),'Color', [1 0 0],'LineWidth',2,'LineStyle','-')
hold off
set(gca,'linewidth',2)
xlim('manual');
ylim('manual');
iga=max(floor((TrainRes.iter-1)/6)+1,1);
set(gca,'XLim',[1 6*iga],'XTick',(1:iga:iga*6));    
ymin=1e20;ymin=min(ymin,min(TrainRes.resnorm(1:TrainRes.iter)));ymin=min(ymin,min(TrainRes.sjctrain(1:TrainRes.iter)));
ymin=min(ymin,min(TrainRes.sjcval(1:TrainRes.iter)));
if cnt_jctest>1
    ymin=min(ymin,min(TrainRes.sjctest(1:TrainRes.iter)));
end
ymax=-1e20; ymax=max(ymax,max(TrainRes.resnorm(1:TrainRes.iter)));ymax=max(ymax,max(TrainRes.sjctrain(1:TrainRes.iter)));
ymax=max(ymax,max(TrainRes.sjcval(1:TrainRes.iter)));ymax=max(ymax,max(TrainRes.sjctest(1:TrainRes.iter)));
ymin=floor(log10(ymin))-1;
ymax=floor(log10(ymax))+1;
if ymax==inf
    ymax=50;
end
if ymin==-inf
    ymin=0;
end
scal=10.^(ymin:ymax);
set(gca,'YLim',[10^ymin 10^ymax],'YTick',scal);    
a = get(gca,'XTickLabel'); 
set(gca,'XTickLabel',a,'FontName','Times','fontsize',18)
a = get(gca,'YTickLabel');
set(gca,'YTickLabel',a,'FontName','Times','fontsize',18)
legend('fobj','train','valid','test')
xlabel('# iteration','FontName','Times','fontsize',18)
ylabel('MSE','FontName','Times','fontsize',18)
title('concentrations','FontName','Times','fontsize',20)

% figure%--------------------------------------------------------------------
% bar(x,AICc,'EdgeColor','b','FaceColor',[1 0.2 0.87],'LineWidth',2)
% set(gca,'linewidth',2)
% xlabel('# iteration','FontName','Times','fontsize',18)
% ylabel('AICc','FontName','Times','fontsize',18)
% a = get(gca,'XTickLabel'); 
% set(gca,'XTickLabel',a,'FontName','Times','fontsize',18)
% a = get(gca,'YTickLabel');
% set(gca,'YTickLabel',a,'FontName','Times','fontsize',18)

% Histogram of MSE concentrations for training
figure
subplot(2,2,1)
[N,histdata]=hist(TrainRes.mj(:,2));
bar(histdata,N,'EdgeColor','b','FaceColor',[1 0.2 0.87],'LineWidth',2);
set(gca,'LineWidth',2);
xlim('manual');
ylim('manual');
xmin=floor(min(histdata)*0.8);
xmax=floor(max(histdata)*1.2);
if xmin==xmax %failsafe for when the minimum and maximum are very close
    xmax=xmin+1;
end
xscal=linspace(xmin,xmax,5);
ymax=(floor(max(N)/5)+1)*5;
set(gca,'XLim',[xmin xmax],'XTick',xscal);    
set(gca,'YLim',[0 ymax],'YTick',(0:ymax/5:ymax));    
xlabel('MSE_c (train)','FontName','Times','fontsize',18)
ylabel('count','FontName','Times','fontsize',18)
a = get(gca,'XTickLabel'); 
set(gca,'XTickLabel',a,'FontName','Times','fontsize',18)
a = get(gca,'YTickLabel');
set(gca,'YTickLabel',a,'FontName','Times','fontsize',18)

% Histogram of MSE concentrations for validation
subplot(2,2,2)
[N,histdata]=hist(TrainRes.mj(:,3));
bar(histdata,N,'EdgeColor','b','FaceColor',[1 0.2 0.87],'LineWidth',2);
set(gca,'LineWidth',2);
xlim('manual');
ylim('manual');
xmin=floor(min(histdata)*0.8);
xmax=floor(max(histdata)*1.2);
if xmin==xmax %failsafe for when the minimum and maximum are very close
    xmax=xmin+1;
end
xscal=linspace(xmin,xmax,5);
ymax=(floor(max(N)/5)+1)*5;
set(gca,'XLim',[xmin xmax],'XTick',xscal);    
set(gca,'YLim',[0 ymax],'YTick',(0:ymax/5:ymax));    
xlabel('MSE_c (valid)','FontName','Times','fontsize',18)
ylabel('count','FontName','Times','fontsize',18)
a = get(gca,'XTickLabel'); 
set(gca,'XTickLabel',a,'FontName','Times','fontsize',18)
a = get(gca,'YTickLabel');
set(gca,'YTickLabel',a,'FontName','Times','fontsize',18)

% Histogram of MSE rates training
subplot(2,2,3)
[N,histdata]=hist(TrainRes.mj(:,5));
bar(histdata,N,'EdgeColor','b','FaceColor',[1 0.2 0.87],'LineWidth',2);
set(gca,'LineWidth',2);
xlim('manual');
ylim('manual');
xmin=floor(min(histdata)*0.8);
xmax=floor(max(histdata)*1.2);
if xmin==xmax %failsafe for when the minimum and maximum are very close
    xmax=xmin+1;
end
xscal=linspace(xmin,xmax,5);
ymax=(floor(max(N)/5)+1)*5;
set(gca,'XLim',[xmin xmax],'XTick',xscal);    
set(gca,'YLim',[0 ymax],'YTick',(0:ymax/5:ymax));    
xlabel('MSE_r (train)','FontName','Times','fontsize',18)
ylabel('count','FontName','Times','fontsize',18)
a = get(gca,'XTickLabel'); 
set(gca,'XTickLabel',a,'FontName','Times','fontsize',18)
a = get(gca,'YTickLabel');
set(gca,'YTickLabel',a,'FontName','Times','fontsize',18)

% Histogram of MSE rates validation
subplot(2,2,4)
[N,histdata]=hist(TrainRes.mj(:,6));
bar(histdata,N,'EdgeColor','b','FaceColor',[1 0.2 0.87],'LineWidth',2);
set(gca,'LineWidth',2);
xlim('manual');
ylim('manual');
xmin=floor(min(histdata)*0.8);
xmax=floor(max(histdata)*1.2);
if xmin==xmax %failsafe for when the minimum and maximum are very close
    xmax=xmin+1;
end
xscal=linspace(xmin,xmax,5);
ymax=(floor(max(N)/5)+1)*5;
set(gca,'XLim',[xmin xmax],'XTick',xscal);    
set(gca,'YLim',[0 ymax],'YTick',(0:ymax/5:ymax));    
xlabel('MSE_r (valid)','FontName','Times','fontsize',18)
ylabel('count','FontName','Times','fontsize',18)
a = get(gca,'XTickLabel'); 
set(gca,'XTickLabel',a,'FontName','Times','fontsize',18)
a = get(gca,'YTickLabel');
set(gca,'YTickLabel',a,'FontName','Times','fontsize',18)

%
% select the best iteration among all iterations as the one with the minimum
% validation error; show fnal results and select ANN weights
%
if projhyb.crossval==1
    ind=find(TrainRes.sjcval(1:TrainRes.iter)==min(TrainRes.sjcval(1:TrainRes.iter)));
    istep=ind(1);
else
    ind=find(TrainRes.sjctrain(1:TrainRes.iter)==min(TrainRes.sjctrain(1:TrainRes.iter)));
    istep=ind(1);
end
fprintf('\n\nBest step: %u\n',istep)
wfinal=TrainRes.witer(istep,:)';
projhyb.w=wfinal;
projhyb.wensemble=TrainRes.wstep;
fprintf('STEP  RESNORM    [C]train   [C]valid   [C]test   [R]train   [R]valid   [R]test    AICc       NW   CPU\n')        
fprintf('%3u %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %3u\n',...
        istep, TrainRes.resnorm(istep),...
        TrainRes.sjctrain(istep),TrainRes.sjcval(istep),TrainRes.sjctest(istep),...
        TrainRes.sjrtrain(istep),TrainRes.sjrval(istep),TrainRes.sjrtest(istep),...
        TrainRes.AICc(istep),projhyb.mlm.nw);
fprintf('AVE %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E None\n',...
        mean(TrainRes.mj(:,1)),mean(TrainRes.mj(:,2)),mean(TrainRes.mj(:,3)),mean(TrainRes.mj(:,4)),...
        mean(TrainRes.mj(:,5)),mean(TrainRes.mj(:,6)),mean(TrainRes.mj(:,7)),mean(TrainRes.mj(:,8)));
fprintf('STD %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E None\n',...
        std(TrainRes.mj(:,1)),std(TrainRes.mj(:,2)),std(TrainRes.mj(:,3)),std(TrainRes.mj(:,4)),...
        std(TrainRes.mj(:,5)),std(TrainRes.mj(:,6)),std(TrainRes.mj(:,7)),std(TrainRes.mj(:,8)));
fprintf('CPU: %10.2E\n',TrainRes.finalcpu);
return
%
% training stops here 
% in what follows is a nested function this is a nested functiom to produce
% ioutput during optimization; this function is called by lsqnonlin or
% fminunc
%
function [stop, optnew , changed]=outFun1(witer,optimValues,optstate,projhyb)%%
stop = false; optnew=[]; changed=false;
if projhyb.method==3 % this might need some changes in the future
    witer=optimValues.x;
end
switch optstate
    case 'init'
        TrainRes.iter0=TrainRes.iter+1;
        TrainRes.count=0;
        return;
    case 'iter'
        TrainRes.count=TrainRes.count+1;
        if projhyb.method==1
            fvaliter=optimValues.residual'*...
              optimValues.residual/numel(optimValues.residual);
        else
             fvaliter = optimValues.fval; %/cnt_jctrain;
        end
        if TrainRes.count<projhyb.niteroptim
         %   fprintf('%3u %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %10.2E %3u %10.2E\n',...
         %       TrainRes.count, fvaliter,[],[],[],[],[],[],[],[],cputime-TrainRes.t0);
        else
            TrainRes.count=0;
            TrainRes=hybtrainiterres(TrainRes,witer,fvaliter,projhyb);
        end
    case 'done'
        if projhyb.method==1
           fvaliter=optimValues.residual'*...
           optimValues.residual/numel(optimValues.residual);
        else
           fvaliter = optimValues.fval; %/cnt_jctrain;
        end
        TrainRes=hybtrainiterres(TrainRes,witer,fvaliter,projhyb); % nested function
        TrainRes.istep=TrainRes.istep+1;
        ind=TrainRes.iter0:TrainRes.iter;
        if projhyb.crossval==1
            ibest=find(TrainRes.sjcval(ind)==min(TrainRes.sjcval(ind)));
            ibest = ibest(1)+TrainRes.iter0-1;
         else
            ibest = TrainRes.iter;
        end
        TrainRes.mj(TrainRes.istep,1:8)=[TrainRes.resnorm(ibest),...
                TrainRes.sjctrain(ibest),...
                TrainRes.sjcval(ibest),...
                TrainRes.sjctest(ibest),...
                TrainRes.sjrtrain(ibest),...
                TrainRes.sjrval(ibest),...
                TrainRes.sjrtest(ibest),...
                TrainRes.AICc(ibest)];
        TrainRes.wstep(TrainRes.istep,1:projhyb.mlm.nw)=TrainRes.witer(ibest,1:projhyb.mlm.nw);
    case 'interrupt'
        %the algorithm is performing an iteration
        %do nothing
    otherwise
        disp('big error')
        optstate
        pause
        return;        
end
return
%
% function ends here; in what follows is a nested function
%
end% outer nested function ends here 
end %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INDIRECT METHOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [sres, sjac, shess]=resfun_indirect_fminunc_hess(w,istrain,projhyb)

ns=projhyb.nstate;
nw=projhyb.mlm.nw;
isres=projhyb.isres;
nres=length(isres);
if ~isempty(projhyb.mlmsetwfunc)
    projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
end
sres=0;
sjac=zeros(1,nw);
shess=zeros(nw,nw);

COUNT = 0;

for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------
    
        tb= projhyb.batch(l).t;
        Y= projhyb.batch(l).state;
        upars = projhyb.batch(l).u;
        sY=projhyb.batch(l).sc;
        np = length(tb);

        state = projhyb.batch(l).state(1,:)';
        Sw=zeros(ns,nw);
        Hsw=zeros(ns*nw,nw);
          
        for i=2:np
            
            [~,state,Sw,Hsw]=hybodesolver(projhyb.fun_hybodes_jac_hess,...
                projhyb.fun_control,projhyb.fun_event,tb(i-1),tb(i),state,Sw,Hsw,w,upars,...
                projhyb);
            
            for j=1:nres
                k1 = isres(j);
                if ~isnan(Y(i,k1))
                    COUNT = COUNT+1;
                    res = (Y(i,k1) - state(k1,1)')./sY(i,k1);
                    sres = sres + res*res;
                    sjac=  sjac -2*res/sY(i,k1)*Sw(k1,:);              
                    shess = shess + (2/sY(i,k1)^2)*Sw(k1,1:nw)'*Sw(k1,1:nw)...
                        -(2*res/sY(i,k1))*Hsw((k1-1)*nw+1:k1*nw,1:nw);
             
                end
            end
                        
        end
    
    end
end
sres=sres/COUNT;
sjac=sjac/COUNT;
shess=shess/COUNT;
end%-----------------------------------------------------------------------

function [sres, sjac]=resfun_indirect_fminunc(w,istrain,projhyb)%%%%%%%%%%%%%%%%%%%
ns=projhyb.nstate;
nw=projhyb.mlm.nw;
isres=projhyb.isres;
nres=projhyb.nres;
if ~isempty(projhyb.mlmsetwfunc)
    projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
end

sres=0;
sjac=zeros(1,nw);

COUNT = 0;
for l=1:projhyb.nbatch%-----

    if istrain(l)== 1%-------
    
        tb= projhyb.batch(l).t;
        Y= projhyb.batch(l).state;
        upars = projhyb.batch(l).u;
        sY=projhyb.batch(l).sc;
        np = length(tb);

        state = projhyb.batch(l).state(1,:)';
        Sw=zeros(ns,nw);
   
        for i=2:np           
            [~,state,Sw]=hybodesolver(projhyb.fun_hybodes_jac,...
                projhyb.fun_control,projhyb.fun_event,tb(i-1),tb(i),state,Sw,0,w,upars,...
                projhyb);
            for j=1:nres
               k1 = isres(j);
               if ~isnan(Y(i,k1))
                    res = (Y(i,k1) - state(k1,1)')./sY(i,k1);
                    sres = sres + res*res;
                    sjac=  sjac + -2*res/sY(i,k1)*Sw(k1,:);
                    COUNT = COUNT+1;
               end
            end
            
        end
    
    end
end
sres=sres/COUNT;
sjac=sjac/COUNT;
end%-----------------------------------------------------------------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INDIRECT METHOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [fobj, jac]=resfun_indirect_jac(w,istrain,projhyb,method)%%%%%
if nargin<4
    method=1;
end
if isempty(istrain)
    istrain=projhyb.istrain;
end    

ns=projhyb.nstate;
nw=projhyb.mlm.nw;
isres=projhyb.isres;
nres=projhyb.nres;
projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
npall=0;
for l=1:projhyb.nbatch
    if istrain(l) == 1
       npall=npall+projhyb.batch(l).np;
    end
end
sresall = zeros(npall*nres,1);
sjacall = zeros(npall*nres,projhyb.mlm.nw);

COUNT = 1;
for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------
    
        tb=projhyb.batch(l).t;
        Y= projhyb.batch(l).state;
        batch = projhyb.batch(l);
        sY=projhyb.batch(l).sc;
        state = projhyb.batch(l).state(1,:)';
        Sw=zeros(ns,nw);

        for i=2:projhyb.batch(l).np
            
            [~,state,Sw]=hybodesolver(projhyb.fun_hybodes_jac,...
                projhyb.fun_control,projhyb.fun_event,tb(i-1),tb(i),state,Sw,0,[],batch,...
                projhyb);
            sresall(COUNT:COUNT+nres-1,1) = (Y(i,isres)' - state(isres,1))./sY(i,isres)';
            sjacall(COUNT:COUNT+nres-1,1:nw)= - Sw(isres,:)./repmat(sY(i,isres)',1,nw);
            COUNT = COUNT+nres;
        
        end
    
    end
end
%finally remove missing values from residuals
ind = ~isnan(sresall);
sresall = sresall(ind);
sjacall = sjacall(ind,:);
ind = ~isinf(sresall); %Remove infinity values from residuals
sresall = sresall(ind);
sjacall = sjacall(ind,:);
fobj=nan;
if method==1 || method==4  %return the sum of squared errors
   fobj=sresall;
   jac=sjacall;
else   %return the sum of squared errors
   fobj=sresall'*sresall/numel(sresall);
   jac=sum(2*repmat(sresall,1,nw).*sjacall,1)/numel(sresall);
end
end%-----------------------------------------------------------------------

function [mse, grads]=resfun_semidirect_jac_batch(w,istrain,projhyb,method)%%%%%   
if nargin<4
    method=1;
end
if nargin<3
    istrain=projhyb.istrain;
end    
ns=projhyb.nstate;
nw=projhyb.mlm.nw;
isres=projhyb.isres;
nres=projhyb.nres;
% npall=0;
% for l=1:projhyb.nbatch
%     if istrain(l) == 1
%        npall=npall+projhyb.batch(l).np;
%     end
% end
% resall = zeros(npall*nres,1);
% jacall = zeros(npall*nres,nw);



projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 



COUNT = 1;
mse = 0;
grads=zeros(1,nw);

for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------
    
        tb=projhyb.batch(l).t;
        Y= projhyb.batch(l).state;
        upars = projhyb.batch(l).u;
        sY=projhyb.batch(l).sc;
        state = projhyb.batch(l).state(1,:)';
        Sw=zeros(ns,nw);
        DstateDrann=zeros(ns,projhyb.mlm.ny);

       
        for i=2:projhyb.batch(l).np
            
            [~,state,DstateDrann]=hybodesolver(projhyb.fun_hybodes_jac,...
                projhyb.fun_control,projhyb.fun_event,tb(i-1),tb(i),state,DstateDrann,0,w,projhyb.batch(l),...
                projhyb);
            
            res=zeros(1,ns);
            res(1,isres) = (Y(i,isres) - state(isres,1)')./sY(i,isres);
            ind =~isnan(res); %missing values
            mse_i = res(1,ind)*res(1,ind)';
            
            DmseDsate=zeros(1,ns);
            DmseDsate(1,ires)=-2*res./sY(i,isres);
            DmseDsate(~ind)=0;  % missing values
            
            DmseDrann=DmseDsate*DstateDrann;
            
            ucontrol = feval(projhyb.fun_control,tb(i),projhyb.batch(l));  
            [inp] = feval(projhyb.mlm.xfun,tb(i),state,ucontrol);
            [~,~,DmseDw] = feval(projhyb.mlm.yfun,inp,w,projhyb.mlm.fundata,DmseDrann);

            mse = mse + mse_i;
            grads = grads + DmseDw;
            
            COUNT = COUNT + nres;
        
        end

    end
end
%finally remove missing values from residuals
mse = mse /count;
grads = grads /count;

end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [fobj]=resfun_indirect(w,istrain,projhyb,method)%-------------------
if nargin<4
    method=1;
end
if nargin<3
    istrain=projhyb.istrain;
end    
ns=projhyb.nstate;
nw=projhyb.mlm.nw;
isres=projhyb.isres;
nres=projhyb.nres;
projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
npall=0;
for l=1:projhyb.nbatch
    if istrain(l) == 1
       npall=npall+projhyb.batch(l).np;
    end
end
resall = zeros(npall*nres,1);

COUNT = 1;
for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------
    
        tb= projhyb.batch(l).t;
        Y= projhyb.batch(l).state;
        upars = projhyb.batch(l).u;
        sY=projhyb.batch(l).sc;
        np = length(tb);

        state = projhyb.batch(l).state(1,:)';
    
        for i=2:np
            
             [~,state]=hybodesolver(projhyb.fun_hybodes,...
                projhyb.fun_control,projhyb.fun_event,tb(i-1),tb(i),state,0,0,w,upars,...
                projhyb);
            resall(COUNT:COUNT+nres-1,1) = (Y(i,isres)' - state(isres,1))./sY(i,isres)';
            COUNT = COUNT+nres;
        
        end
    
    end
end

%finally remove missing values from residuals
ind = ~isnan(resall);
resall=resall(ind);
ind = ~isinf(resall); %Remove infinity values from residuals
resall = resall(ind);

fobj=nan;
if method==1   %return the sum of squared errors
   fobj=resall;
else   %return the sum of squared errors
   fobj=resall'*resall/numel(resall);
end
end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DIRECT METHOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [fobj, jac]=resfun_direct_jac(w,istrain,projhyb,method)%%%%%
if nargin<4
    method=1;
end    
if nargin<3
    istrain=projhyb.istrain;
end    

isress=projhyb.isresstate;
ns=length(isress);
nw=projhyb.mlm.nw;
projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
npall=0;
for l=1:projhyb.nbatch
    if istrain(l) == 1
       npall=npall+projhyb.batch(l).np;
    end
end
resall = zeros(npall*ns,1);
jacall = zeros(npall*ns,nw);
COUNT = 1;
for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------    
        tb= projhyb.batch(l).t;
        r= projhyb.batch(l).rnoise;
        upars = projhyb.batch(l).u;
        sr=projhyb.batch(l).sr;
        np = length(tb);
        for i=1:np
            tt=tb(i);
            state = projhyb.batch(l).state(i,:)';
            ucontrol = feval(projhyb.fun_control,tt,upars);            
            [rhyb_v,~,~,DrhybDw] = feval(projhyb.fun_hybrates_jac,tt,state,w,ucontrol,projhyb);
            resall(COUNT:COUNT+ns-1,1) = (r(i,isress)' - rhyb_v(isress,1))./sr(i,isress)';
            jacall(COUNT:COUNT+ns-1,1:nw) = -DrhybDw(isress,:)./repmat(sr(i,isress)',1,nw);
            COUNT = COUNT+ns;
        end    
    end
    
end
%finally remove missing values from residuals
ind=~isnan(resall);
resall=resall(ind);
jacall=jacall(ind,:);
ind = ~isinf(resall); %Remove infinity values from residuals
resall = resall(ind);
jacall = jacall(ind,:);
fobj=nan;
if method==1   %levenbergmarquardt
   fobj=resall;
   jac=jacall;
else
   fobj=resall'*resall/numel(resall);
   jac=sum(2*repmat(resall,1,nw).*jacall,1)/numel(resall);
end
end%-----------------------------------------------------------------------


function [fobj]=resfun_direct(w,istrain,projhyb,method)%---------------------
if nargin<4
    method=1;
end
if nargin<3
    istrain=projhyb.istrain;
end    
isress=projhyb.isresstate;
ns=length(isress);
projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
npall=0;
for l=1:projhyb.nbatch
    if istrain(l) == 1
       npall=npall+projhyb.batch(l).np;
    end
end
resall = zeros(npall*ns,1);
COUNT = 1;
for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------    
        tb= projhyb.batch(l).t;
        r= projhyb.batch(l).rnoise;
        upars = projhyb.batch(l).u;
        sr=projhyb.batch(l).sr;
        np = length(tb);
        for i=1:np
            tt=tb(i);
            state = projhyb.batch(l).state(i,:)';
            ucontrol = feval(projhyb.fun_control,tt,upars);            
            [rhyb_v,~] = feval(projhyb.fun_hybrates,tt,state,w,ucontrol,projhyb);
            resall(COUNT:COUNT+ns-1,1) = (r(i,isress)' - rhyb_v(isress,1))./sr(i,isress)';
            COUNT = COUNT+ns;
        end    
    end
    
end
ind=~isnan(resall);
resall=resall(ind);
ind = ~isinf(sresall); %Remove infinity values from residuals
resall = resall(ind);
fobj=nan;
if method==1   %levenbergmarquardt
   fobj=resall;
else   %return the sum of squared errors
   fobj=resall'*resall/numel(resall);
end
end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% SEMIDIRECT METHOD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [fobj]=resfun_semidirect(w,istrain,projhyb,method)%%%%%
if nargin<4
    method=1;
end
if nargin<3
    istrain=projhyb.istrain;
end    
isress=projhyb.isresstate;
ns=length(isress);
npall=0;
for l=1:projhyb.nbatch
    if istrain(l) == 1
       npall=npall+projhyb.batch(l).np;
    end
end
resall = zeros(npall*ns,1);
projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
COUNT = 1;
for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------    
        tb= projhyb.batch(l).t;
        r= projhyb.batch(l).rnoise;
        upars = projhyb.batch(l).u;
        sr=projhyb.batch(l).sr;
        np = length(tb);
        for i=1:np-1
            tt=tb(i);
            state = projhyb.batch(l).state(i,:)';
            ucontrol = feval(projhyb.fun_control,tt,upars);            
            [rhyb_v,~] = feval(projhyb.fun_hybrates,tt,state,w,ucontrol,projhyb);
            if i==1
                resall(COUNT:COUNT+ns-1,1) = zeros(ns,1);
            end
            %this function is not suited to missing values????????????????
            resall(COUNT+ns:COUNT+ns+ns-1,1) = resall(COUNT:COUNT+ns-1,1)+(r(i,:)' - rhyb_v(isress,1))./sr(i,isress)';
            COUNT = COUNT+ns;
        end    
    end
    
end
ind = ~isnan(resall);
resall=resall(ind);
ind = ~isinf(resall); %Remove infinity values from residuals
resall = resall(ind);
fobj=nan;
if method==1   %levenbergmarquardt
    fobj=resall;
else
    fobj=resall'*resall/numel(resall);
end
end%-----------------------------------------------------------------------


function [fobj, jac]=resfun_semidirect_jac(w,istrain,projhyb,method)%%%%%   
if nargin<4
    method=1;
end
if nargin<3
    istrain=projhyb.istrain;
end    
ns=projhyb.nstate;
nw=projhyb.mlm.nw;
isres=projhyb.isres;
nres=projhyb.nres;
npall=0;
for l=1:projhyb.nbatch
    if istrain(l) == 1
       npall=npall+projhyb.batch(l).np;
    end
end
resall = zeros(npall*nres,1);
jacall = zeros(npall*nres,nw);
projhyb.mlm.fundata=feval(projhyb.mlmsetwfunc,projhyb.mlm.fundata,w); %set weigths 
COUNT = 1;
for l=1:projhyb.nbatch%-----

    if istrain(l) == 1%-------
    
        tb=projhyb.batch(l).t;
        Y= projhyb.batch(l).state;
        upars = projhyb.batch(l).u;
        sY=projhyb.batch(l).sc;
        state = projhyb.batch(l).state(1,:)';
        Sw=zeros(ns,nw);
        jac=zeros(ns,projhyb.mlm.ny);

       
        for i=2:projhyb.batch(l).np
            
            [~,state,jac]=hybodesolver(projhyb.fun_hybodes_jac,...
                projhyb.fun_control,projhyb.fun_event,tb(i-1),tb(i),state,jac,0,w,projhyb.batch(l),...
                projhyb);
            ucontrol = feval(projhyb.fun_control,tb(i),projhyb.batch(l));  
            [inp] = feval(projhyb.mlm.xfun,tb(i),state,ucontrol);
            [~,~,DrannDw] =feval(projhyb.mlm.yfun,inp,w,projhyb.mlm.fundata);
            Sw=jac*DrannDw;
            resall(COUNT:COUNT+nres-1,1) = (Y(i,isres)' - state(isres,1))./sY(i,isres)';
            jacall(COUNT:COUNT+nres-1,1:nw)= - Sw(isres,:)./repmat(sY(i,isres)',1,nw);
            COUNT = COUNT+nres;
        
        end


    end
end
%finally remove missing values from residuals
ind = ~isnan(resall);
resall = resall(ind);
jacall = jacall(ind,:);
ind = ~isinf(resall); %Remove infinity values from residuals
resall = resall(ind);
jacall = jacall(ind,:);
fobj=nan;
if method==1 || method==4 %levenbergmarquardt or ADAM
    fobj=resall;
    jac=jacall;
else
    fobj=resall'*resall/numel(resall);
    jac=sum(2*repmat(resall,1,nw).*jacall,1)/numel(resall);
end
end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
